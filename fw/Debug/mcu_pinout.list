
mcu_pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003570  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08003628  08003628  00013628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800370c  0800370c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800370c  0800370c  0001370c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003714  08003714  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003714  08003714  00013714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003718  08003718  00013718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800371c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000564  2000000c  08003728  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000570  08003728  00020570  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cea1  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001af4  00000000  00000000  0002ced5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  0002e9d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000900  00000000  00000000  0002f378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e1c  00000000  00000000  0002fc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bda0  00000000  00000000  00045a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bb97  00000000  00000000  00051834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dd3cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021b0  00000000  00000000  000dd420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003610 	.word	0x08003610

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08003610 	.word	0x08003610

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	; 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			; (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			; (mov r8, r8)

08000218 <__aeabi_uldivmod>:
 8000218:	2b00      	cmp	r3, #0
 800021a:	d111      	bne.n	8000240 <__aeabi_uldivmod+0x28>
 800021c:	2a00      	cmp	r2, #0
 800021e:	d10f      	bne.n	8000240 <__aeabi_uldivmod+0x28>
 8000220:	2900      	cmp	r1, #0
 8000222:	d100      	bne.n	8000226 <__aeabi_uldivmod+0xe>
 8000224:	2800      	cmp	r0, #0
 8000226:	d002      	beq.n	800022e <__aeabi_uldivmod+0x16>
 8000228:	2100      	movs	r1, #0
 800022a:	43c9      	mvns	r1, r1
 800022c:	1c08      	adds	r0, r1, #0
 800022e:	b407      	push	{r0, r1, r2}
 8000230:	4802      	ldr	r0, [pc, #8]	; (800023c <__aeabi_uldivmod+0x24>)
 8000232:	a102      	add	r1, pc, #8	; (adr r1, 800023c <__aeabi_uldivmod+0x24>)
 8000234:	1840      	adds	r0, r0, r1
 8000236:	9002      	str	r0, [sp, #8]
 8000238:	bd03      	pop	{r0, r1, pc}
 800023a:	46c0      	nop			; (mov r8, r8)
 800023c:	ffffffd9 	.word	0xffffffd9
 8000240:	b403      	push	{r0, r1}
 8000242:	4668      	mov	r0, sp
 8000244:	b501      	push	{r0, lr}
 8000246:	9802      	ldr	r0, [sp, #8]
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	9b01      	ldr	r3, [sp, #4]
 800024e:	469e      	mov	lr, r3
 8000250:	b002      	add	sp, #8
 8000252:	bc0c      	pop	{r2, r3}
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__udivmoddi4>:
 8000258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025a:	4657      	mov	r7, sl
 800025c:	464e      	mov	r6, r9
 800025e:	4645      	mov	r5, r8
 8000260:	46de      	mov	lr, fp
 8000262:	b5e0      	push	{r5, r6, r7, lr}
 8000264:	0004      	movs	r4, r0
 8000266:	000d      	movs	r5, r1
 8000268:	4692      	mov	sl, r2
 800026a:	4699      	mov	r9, r3
 800026c:	b083      	sub	sp, #12
 800026e:	428b      	cmp	r3, r1
 8000270:	d830      	bhi.n	80002d4 <__udivmoddi4+0x7c>
 8000272:	d02d      	beq.n	80002d0 <__udivmoddi4+0x78>
 8000274:	4649      	mov	r1, r9
 8000276:	4650      	mov	r0, sl
 8000278:	f000 f8ba 	bl	80003f0 <__clzdi2>
 800027c:	0029      	movs	r1, r5
 800027e:	0006      	movs	r6, r0
 8000280:	0020      	movs	r0, r4
 8000282:	f000 f8b5 	bl	80003f0 <__clzdi2>
 8000286:	1a33      	subs	r3, r6, r0
 8000288:	4698      	mov	r8, r3
 800028a:	3b20      	subs	r3, #32
 800028c:	469b      	mov	fp, r3
 800028e:	d433      	bmi.n	80002f8 <__udivmoddi4+0xa0>
 8000290:	465a      	mov	r2, fp
 8000292:	4653      	mov	r3, sl
 8000294:	4093      	lsls	r3, r2
 8000296:	4642      	mov	r2, r8
 8000298:	001f      	movs	r7, r3
 800029a:	4653      	mov	r3, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001e      	movs	r6, r3
 80002a0:	42af      	cmp	r7, r5
 80002a2:	d83a      	bhi.n	800031a <__udivmoddi4+0xc2>
 80002a4:	42af      	cmp	r7, r5
 80002a6:	d100      	bne.n	80002aa <__udivmoddi4+0x52>
 80002a8:	e078      	b.n	800039c <__udivmoddi4+0x144>
 80002aa:	465b      	mov	r3, fp
 80002ac:	1ba4      	subs	r4, r4, r6
 80002ae:	41bd      	sbcs	r5, r7
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	da00      	bge.n	80002b6 <__udivmoddi4+0x5e>
 80002b4:	e075      	b.n	80003a2 <__udivmoddi4+0x14a>
 80002b6:	2200      	movs	r2, #0
 80002b8:	2300      	movs	r3, #0
 80002ba:	9200      	str	r2, [sp, #0]
 80002bc:	9301      	str	r3, [sp, #4]
 80002be:	2301      	movs	r3, #1
 80002c0:	465a      	mov	r2, fp
 80002c2:	4093      	lsls	r3, r2
 80002c4:	9301      	str	r3, [sp, #4]
 80002c6:	2301      	movs	r3, #1
 80002c8:	4642      	mov	r2, r8
 80002ca:	4093      	lsls	r3, r2
 80002cc:	9300      	str	r3, [sp, #0]
 80002ce:	e028      	b.n	8000322 <__udivmoddi4+0xca>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	d9cf      	bls.n	8000274 <__udivmoddi4+0x1c>
 80002d4:	2200      	movs	r2, #0
 80002d6:	2300      	movs	r3, #0
 80002d8:	9200      	str	r2, [sp, #0]
 80002da:	9301      	str	r3, [sp, #4]
 80002dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <__udivmoddi4+0x8e>
 80002e2:	601c      	str	r4, [r3, #0]
 80002e4:	605d      	str	r5, [r3, #4]
 80002e6:	9800      	ldr	r0, [sp, #0]
 80002e8:	9901      	ldr	r1, [sp, #4]
 80002ea:	b003      	add	sp, #12
 80002ec:	bcf0      	pop	{r4, r5, r6, r7}
 80002ee:	46bb      	mov	fp, r7
 80002f0:	46b2      	mov	sl, r6
 80002f2:	46a9      	mov	r9, r5
 80002f4:	46a0      	mov	r8, r4
 80002f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f8:	4642      	mov	r2, r8
 80002fa:	2320      	movs	r3, #32
 80002fc:	1a9b      	subs	r3, r3, r2
 80002fe:	4652      	mov	r2, sl
 8000300:	40da      	lsrs	r2, r3
 8000302:	4641      	mov	r1, r8
 8000304:	0013      	movs	r3, r2
 8000306:	464a      	mov	r2, r9
 8000308:	408a      	lsls	r2, r1
 800030a:	0017      	movs	r7, r2
 800030c:	4642      	mov	r2, r8
 800030e:	431f      	orrs	r7, r3
 8000310:	4653      	mov	r3, sl
 8000312:	4093      	lsls	r3, r2
 8000314:	001e      	movs	r6, r3
 8000316:	42af      	cmp	r7, r5
 8000318:	d9c4      	bls.n	80002a4 <__udivmoddi4+0x4c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	4643      	mov	r3, r8
 8000324:	2b00      	cmp	r3, #0
 8000326:	d0d9      	beq.n	80002dc <__udivmoddi4+0x84>
 8000328:	07fb      	lsls	r3, r7, #31
 800032a:	0872      	lsrs	r2, r6, #1
 800032c:	431a      	orrs	r2, r3
 800032e:	4646      	mov	r6, r8
 8000330:	087b      	lsrs	r3, r7, #1
 8000332:	e00e      	b.n	8000352 <__udivmoddi4+0xfa>
 8000334:	42ab      	cmp	r3, r5
 8000336:	d101      	bne.n	800033c <__udivmoddi4+0xe4>
 8000338:	42a2      	cmp	r2, r4
 800033a:	d80c      	bhi.n	8000356 <__udivmoddi4+0xfe>
 800033c:	1aa4      	subs	r4, r4, r2
 800033e:	419d      	sbcs	r5, r3
 8000340:	2001      	movs	r0, #1
 8000342:	1924      	adds	r4, r4, r4
 8000344:	416d      	adcs	r5, r5
 8000346:	2100      	movs	r1, #0
 8000348:	3e01      	subs	r6, #1
 800034a:	1824      	adds	r4, r4, r0
 800034c:	414d      	adcs	r5, r1
 800034e:	2e00      	cmp	r6, #0
 8000350:	d006      	beq.n	8000360 <__udivmoddi4+0x108>
 8000352:	42ab      	cmp	r3, r5
 8000354:	d9ee      	bls.n	8000334 <__udivmoddi4+0xdc>
 8000356:	3e01      	subs	r6, #1
 8000358:	1924      	adds	r4, r4, r4
 800035a:	416d      	adcs	r5, r5
 800035c:	2e00      	cmp	r6, #0
 800035e:	d1f8      	bne.n	8000352 <__udivmoddi4+0xfa>
 8000360:	9800      	ldr	r0, [sp, #0]
 8000362:	9901      	ldr	r1, [sp, #4]
 8000364:	465b      	mov	r3, fp
 8000366:	1900      	adds	r0, r0, r4
 8000368:	4169      	adcs	r1, r5
 800036a:	2b00      	cmp	r3, #0
 800036c:	db24      	blt.n	80003b8 <__udivmoddi4+0x160>
 800036e:	002b      	movs	r3, r5
 8000370:	465a      	mov	r2, fp
 8000372:	4644      	mov	r4, r8
 8000374:	40d3      	lsrs	r3, r2
 8000376:	002a      	movs	r2, r5
 8000378:	40e2      	lsrs	r2, r4
 800037a:	001c      	movs	r4, r3
 800037c:	465b      	mov	r3, fp
 800037e:	0015      	movs	r5, r2
 8000380:	2b00      	cmp	r3, #0
 8000382:	db2a      	blt.n	80003da <__udivmoddi4+0x182>
 8000384:	0026      	movs	r6, r4
 8000386:	409e      	lsls	r6, r3
 8000388:	0033      	movs	r3, r6
 800038a:	0026      	movs	r6, r4
 800038c:	4647      	mov	r7, r8
 800038e:	40be      	lsls	r6, r7
 8000390:	0032      	movs	r2, r6
 8000392:	1a80      	subs	r0, r0, r2
 8000394:	4199      	sbcs	r1, r3
 8000396:	9000      	str	r0, [sp, #0]
 8000398:	9101      	str	r1, [sp, #4]
 800039a:	e79f      	b.n	80002dc <__udivmoddi4+0x84>
 800039c:	42a3      	cmp	r3, r4
 800039e:	d8bc      	bhi.n	800031a <__udivmoddi4+0xc2>
 80003a0:	e783      	b.n	80002aa <__udivmoddi4+0x52>
 80003a2:	4642      	mov	r2, r8
 80003a4:	2320      	movs	r3, #32
 80003a6:	2100      	movs	r1, #0
 80003a8:	1a9b      	subs	r3, r3, r2
 80003aa:	2200      	movs	r2, #0
 80003ac:	9100      	str	r1, [sp, #0]
 80003ae:	9201      	str	r2, [sp, #4]
 80003b0:	2201      	movs	r2, #1
 80003b2:	40da      	lsrs	r2, r3
 80003b4:	9201      	str	r2, [sp, #4]
 80003b6:	e786      	b.n	80002c6 <__udivmoddi4+0x6e>
 80003b8:	4642      	mov	r2, r8
 80003ba:	2320      	movs	r3, #32
 80003bc:	1a9b      	subs	r3, r3, r2
 80003be:	002a      	movs	r2, r5
 80003c0:	4646      	mov	r6, r8
 80003c2:	409a      	lsls	r2, r3
 80003c4:	0023      	movs	r3, r4
 80003c6:	40f3      	lsrs	r3, r6
 80003c8:	4644      	mov	r4, r8
 80003ca:	4313      	orrs	r3, r2
 80003cc:	002a      	movs	r2, r5
 80003ce:	40e2      	lsrs	r2, r4
 80003d0:	001c      	movs	r4, r3
 80003d2:	465b      	mov	r3, fp
 80003d4:	0015      	movs	r5, r2
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	dad4      	bge.n	8000384 <__udivmoddi4+0x12c>
 80003da:	4642      	mov	r2, r8
 80003dc:	002f      	movs	r7, r5
 80003de:	2320      	movs	r3, #32
 80003e0:	0026      	movs	r6, r4
 80003e2:	4097      	lsls	r7, r2
 80003e4:	1a9b      	subs	r3, r3, r2
 80003e6:	40de      	lsrs	r6, r3
 80003e8:	003b      	movs	r3, r7
 80003ea:	4333      	orrs	r3, r6
 80003ec:	e7cd      	b.n	800038a <__udivmoddi4+0x132>
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__clzdi2>:
 80003f0:	b510      	push	{r4, lr}
 80003f2:	2900      	cmp	r1, #0
 80003f4:	d103      	bne.n	80003fe <__clzdi2+0xe>
 80003f6:	f000 f807 	bl	8000408 <__clzsi2>
 80003fa:	3020      	adds	r0, #32
 80003fc:	e002      	b.n	8000404 <__clzdi2+0x14>
 80003fe:	1c08      	adds	r0, r1, #0
 8000400:	f000 f802 	bl	8000408 <__clzsi2>
 8000404:	bd10      	pop	{r4, pc}
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__clzsi2>:
 8000408:	211c      	movs	r1, #28
 800040a:	2301      	movs	r3, #1
 800040c:	041b      	lsls	r3, r3, #16
 800040e:	4298      	cmp	r0, r3
 8000410:	d301      	bcc.n	8000416 <__clzsi2+0xe>
 8000412:	0c00      	lsrs	r0, r0, #16
 8000414:	3910      	subs	r1, #16
 8000416:	0a1b      	lsrs	r3, r3, #8
 8000418:	4298      	cmp	r0, r3
 800041a:	d301      	bcc.n	8000420 <__clzsi2+0x18>
 800041c:	0a00      	lsrs	r0, r0, #8
 800041e:	3908      	subs	r1, #8
 8000420:	091b      	lsrs	r3, r3, #4
 8000422:	4298      	cmp	r0, r3
 8000424:	d301      	bcc.n	800042a <__clzsi2+0x22>
 8000426:	0900      	lsrs	r0, r0, #4
 8000428:	3904      	subs	r1, #4
 800042a:	a202      	add	r2, pc, #8	; (adr r2, 8000434 <__clzsi2+0x2c>)
 800042c:	5c10      	ldrb	r0, [r2, r0]
 800042e:	1840      	adds	r0, r0, r1
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	02020304 	.word	0x02020304
 8000438:	01010101 	.word	0x01010101
	...

08000444 <lcd_set_data_mode>:
 *      Author: Anton
 */

#include "lcd.h"

void lcd_set_data_mode(lcd_t* lcd, uint32_t mode) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b088      	sub	sp, #32
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
 800044c:	6039      	str	r1, [r7, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	2308      	movs	r3, #8
 8000450:	18fb      	adds	r3, r7, r3
 8000452:	0018      	movs	r0, r3
 8000454:	2314      	movs	r3, #20
 8000456:	001a      	movs	r2, r3
 8000458:	2100      	movs	r1, #0
 800045a:	f003 f8d1 	bl	8003600 <memset>
	for (int i = 0; i < 8; i++) {
 800045e:	2300      	movs	r3, #0
 8000460:	61fb      	str	r3, [r7, #28]
 8000462:	e017      	b.n	8000494 <lcd_set_data_mode+0x50>
		GPIO_InitStruct.Pin = lcd->data_pin[i];
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	69fa      	ldr	r2, [r7, #28]
 8000468:	3210      	adds	r2, #16
 800046a:	0052      	lsls	r2, r2, #1
 800046c:	5ad3      	ldrh	r3, [r2, r3]
 800046e:	001a      	movs	r2, r3
 8000470:	2108      	movs	r1, #8
 8000472:	187b      	adds	r3, r7, r1
 8000474:	601a      	str	r2, [r3, #0]
		GPIO_InitStruct.Mode = mode;
 8000476:	187b      	adds	r3, r7, r1
 8000478:	683a      	ldr	r2, [r7, #0]
 800047a:	605a      	str	r2, [r3, #4]
		HAL_GPIO_Init(lcd->data_gpio[i], &GPIO_InitStruct);
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	69fa      	ldr	r2, [r7, #28]
 8000480:	0092      	lsls	r2, r2, #2
 8000482:	58d3      	ldr	r3, [r2, r3]
 8000484:	187a      	adds	r2, r7, r1
 8000486:	0011      	movs	r1, r2
 8000488:	0018      	movs	r0, r3
 800048a:	f000 fe33 	bl	80010f4 <HAL_GPIO_Init>
	for (int i = 0; i < 8; i++) {
 800048e:	69fb      	ldr	r3, [r7, #28]
 8000490:	3301      	adds	r3, #1
 8000492:	61fb      	str	r3, [r7, #28]
 8000494:	69fb      	ldr	r3, [r7, #28]
 8000496:	2b07      	cmp	r3, #7
 8000498:	dde4      	ble.n	8000464 <lcd_set_data_mode+0x20>
	}
}
 800049a:	46c0      	nop			; (mov r8, r8)
 800049c:	46c0      	nop			; (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b008      	add	sp, #32
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <lcd_write_char>:

void lcd_write_char(lcd_t* lcd, char c) {
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b084      	sub	sp, #16
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	000a      	movs	r2, r1
 80004ae:	1cfb      	adds	r3, r7, #3
 80004b0:	701a      	strb	r2, [r3, #0]
	lcd_set_data_mode(lcd, GPIO_MODE_OUTPUT_PP);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	2101      	movs	r1, #1
 80004b6:	0018      	movs	r0, r3
 80004b8:	f7ff ffc4 	bl	8000444 <lcd_set_data_mode>
	HAL_GPIO_WritePin(lcd->ctrl_gpio[CTRL_RS], lcd->ctrl_pin[CTRL_RS], 1);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80004c4:	2201      	movs	r2, #1
 80004c6:	0019      	movs	r1, r3
 80004c8:	f000 ff95 	bl	80013f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->ctrl_gpio[CTRL_RW], lcd->ctrl_pin[CTRL_RW], 0);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80004d4:	2200      	movs	r2, #0
 80004d6:	0019      	movs	r1, r3
 80004d8:	f000 ff8d 	bl	80013f6 <HAL_GPIO_WritePin>
	for (int i = 0; i < 8; i++) {
 80004dc:	2300      	movs	r3, #0
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	e017      	b.n	8000512 <lcd_write_char+0x6e>
		HAL_GPIO_WritePin(lcd->data_gpio[i], lcd->data_pin[i], (c & (1 << i)) ? 1 : 0);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	68fa      	ldr	r2, [r7, #12]
 80004e6:	0092      	lsls	r2, r2, #2
 80004e8:	58d0      	ldr	r0, [r2, r3]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	68fa      	ldr	r2, [r7, #12]
 80004ee:	3210      	adds	r2, #16
 80004f0:	0052      	lsls	r2, r2, #1
 80004f2:	5ad1      	ldrh	r1, [r2, r3]
 80004f4:	1cfb      	adds	r3, r7, #3
 80004f6:	781a      	ldrb	r2, [r3, #0]
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	411a      	asrs	r2, r3
 80004fc:	0013      	movs	r3, r2
 80004fe:	b2db      	uxtb	r3, r3
 8000500:	2201      	movs	r2, #1
 8000502:	4013      	ands	r3, r2
 8000504:	b2db      	uxtb	r3, r3
 8000506:	001a      	movs	r2, r3
 8000508:	f000 ff75 	bl	80013f6 <HAL_GPIO_WritePin>
	for (int i = 0; i < 8; i++) {
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	3301      	adds	r3, #1
 8000510:	60fb      	str	r3, [r7, #12]
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	2b07      	cmp	r3, #7
 8000516:	dde4      	ble.n	80004e2 <lcd_write_char+0x3e>
	}
	HAL_GPIO_WritePin(lcd->ctrl_gpio[CTRL_E], lcd->ctrl_pin[CTRL_E], 1);
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2240      	movs	r2, #64	; 0x40
 8000520:	5a9b      	ldrh	r3, [r3, r2]
 8000522:	2201      	movs	r2, #1
 8000524:	0019      	movs	r1, r3
 8000526:	f000 ff66 	bl	80013f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->ctrl_gpio[CTRL_E], lcd->ctrl_pin[CTRL_E], 0);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2240      	movs	r2, #64	; 0x40
 8000532:	5a9b      	ldrh	r3, [r3, r2]
 8000534:	2200      	movs	r2, #0
 8000536:	0019      	movs	r1, r3
 8000538:	f000 ff5d 	bl	80013f6 <HAL_GPIO_WritePin>
}
 800053c:	46c0      	nop			; (mov r8, r8)
 800053e:	46bd      	mov	sp, r7
 8000540:	b004      	add	sp, #16
 8000542:	bd80      	pop	{r7, pc}

08000544 <lcd_wait_avail>:

void lcd_wait_avail(lcd_t* lcd) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	lcd_set_data_mode(lcd, GPIO_MODE_INPUT);
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	2100      	movs	r1, #0
 8000550:	0018      	movs	r0, r3
 8000552:	f7ff ff77 	bl	8000444 <lcd_set_data_mode>
	HAL_GPIO_WritePin(lcd->ctrl_gpio[CTRL_RS], lcd->ctrl_pin[CTRL_RS], 0);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800055e:	2200      	movs	r2, #0
 8000560:	0019      	movs	r1, r3
 8000562:	f000 ff48 	bl	80013f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->ctrl_gpio[CTRL_RW], lcd->ctrl_pin[CTRL_RW], 1);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800056e:	2201      	movs	r2, #1
 8000570:	0019      	movs	r1, r3
 8000572:	f000 ff40 	bl	80013f6 <HAL_GPIO_WritePin>
	do {
		HAL_GPIO_WritePin(lcd->ctrl_gpio[CTRL_E], lcd->ctrl_pin[CTRL_E], 0);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2240      	movs	r2, #64	; 0x40
 800057e:	5a9b      	ldrh	r3, [r3, r2]
 8000580:	2200      	movs	r2, #0
 8000582:	0019      	movs	r1, r3
 8000584:	f000 ff37 	bl	80013f6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(lcd->ctrl_gpio[CTRL_E], lcd->ctrl_pin[CTRL_E], 1);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	2240      	movs	r2, #64	; 0x40
 8000590:	5a9b      	ldrh	r3, [r3, r2]
 8000592:	2201      	movs	r2, #1
 8000594:	0019      	movs	r1, r3
 8000596:	f000 ff2e 	bl	80013f6 <HAL_GPIO_WritePin>
	} while (HAL_GPIO_ReadPin(lcd->data_gpio[7], lcd->data_pin[7]));
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	69da      	ldr	r2, [r3, #28]
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80005a2:	0019      	movs	r1, r3
 80005a4:	0010      	movs	r0, r2
 80005a6:	f000 ff09 	bl	80013bc <HAL_GPIO_ReadPin>
 80005aa:	1e03      	subs	r3, r0, #0
 80005ac:	d1e3      	bne.n	8000576 <lcd_wait_avail+0x32>
}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	46c0      	nop			; (mov r8, r8)
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b002      	add	sp, #8
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <lcd_init>:

void lcd_init(lcd_t* lcd) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	// for my specific lcd, not custom
	lcd_wait_avail(lcd);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	0018      	movs	r0, r3
 80005c4:	f7ff ffbe 	bl	8000544 <lcd_wait_avail>
	lcd_command(lcd, 0b00111000); // function set, 8bit interface, 2 lines, 5x8 font
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2138      	movs	r1, #56	; 0x38
 80005cc:	0018      	movs	r0, r3
 80005ce:	f000 f823 	bl	8000618 <lcd_command>
	lcd_wait_avail(lcd);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	0018      	movs	r0, r3
 80005d6:	f7ff ffb5 	bl	8000544 <lcd_wait_avail>
	lcd_command(lcd, 0b00001100); // display on, cursor off blinking off
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	210c      	movs	r1, #12
 80005de:	0018      	movs	r0, r3
 80005e0:	f000 f81a 	bl	8000618 <lcd_command>
	lcd_wait_avail(lcd);
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	0018      	movs	r0, r3
 80005e8:	f7ff ffac 	bl	8000544 <lcd_wait_avail>
	lcd_command(lcd, 0b00000110); // entry mode set, increment and no shift
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2106      	movs	r1, #6
 80005f0:	0018      	movs	r0, r3
 80005f2:	f000 f811 	bl	8000618 <lcd_command>
	lcd_wait_avail(lcd);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	0018      	movs	r0, r3
 80005fa:	f7ff ffa3 	bl	8000544 <lcd_wait_avail>
	lcd_command(lcd, 0b10000000); // set ddram addr to 0
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2180      	movs	r1, #128	; 0x80
 8000602:	0018      	movs	r0, r3
 8000604:	f000 f808 	bl	8000618 <lcd_command>
	lcd_wait_avail(lcd);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	0018      	movs	r0, r3
 800060c:	f7ff ff9a 	bl	8000544 <lcd_wait_avail>
}
 8000610:	46c0      	nop			; (mov r8, r8)
 8000612:	46bd      	mov	sp, r7
 8000614:	b002      	add	sp, #8
 8000616:	bd80      	pop	{r7, pc}

08000618 <lcd_command>:

void lcd_command(lcd_t* lcd, uint8_t command) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	000a      	movs	r2, r1
 8000622:	1cfb      	adds	r3, r7, #3
 8000624:	701a      	strb	r2, [r3, #0]
	lcd_set_data_mode(lcd, GPIO_MODE_OUTPUT_PP);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2101      	movs	r1, #1
 800062a:	0018      	movs	r0, r3
 800062c:	f7ff ff0a 	bl	8000444 <lcd_set_data_mode>
	HAL_GPIO_WritePin(lcd->ctrl_gpio[CTRL_RS], lcd->ctrl_pin[CTRL_RS], 0);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8000638:	2200      	movs	r2, #0
 800063a:	0019      	movs	r1, r3
 800063c:	f000 fedb 	bl	80013f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->ctrl_gpio[CTRL_RW], lcd->ctrl_pin[CTRL_RW], 0);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000648:	2200      	movs	r2, #0
 800064a:	0019      	movs	r1, r3
 800064c:	f000 fed3 	bl	80013f6 <HAL_GPIO_WritePin>
	for (int i = 0; i < 8; i++) {
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	e017      	b.n	8000686 <lcd_command+0x6e>
		HAL_GPIO_WritePin(lcd->data_gpio[i], lcd->data_pin[i], (command & (1 << i)) ? 1 : 0);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	68fa      	ldr	r2, [r7, #12]
 800065a:	0092      	lsls	r2, r2, #2
 800065c:	58d0      	ldr	r0, [r2, r3]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	68fa      	ldr	r2, [r7, #12]
 8000662:	3210      	adds	r2, #16
 8000664:	0052      	lsls	r2, r2, #1
 8000666:	5ad1      	ldrh	r1, [r2, r3]
 8000668:	1cfb      	adds	r3, r7, #3
 800066a:	781a      	ldrb	r2, [r3, #0]
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	411a      	asrs	r2, r3
 8000670:	0013      	movs	r3, r2
 8000672:	b2db      	uxtb	r3, r3
 8000674:	2201      	movs	r2, #1
 8000676:	4013      	ands	r3, r2
 8000678:	b2db      	uxtb	r3, r3
 800067a:	001a      	movs	r2, r3
 800067c:	f000 febb 	bl	80013f6 <HAL_GPIO_WritePin>
	for (int i = 0; i < 8; i++) {
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	3301      	adds	r3, #1
 8000684:	60fb      	str	r3, [r7, #12]
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	2b07      	cmp	r3, #7
 800068a:	dde4      	ble.n	8000656 <lcd_command+0x3e>
	}
	HAL_GPIO_WritePin(lcd->ctrl_gpio[CTRL_E], lcd->ctrl_pin[CTRL_E], 1);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	2240      	movs	r2, #64	; 0x40
 8000694:	5a9b      	ldrh	r3, [r3, r2]
 8000696:	2201      	movs	r2, #1
 8000698:	0019      	movs	r1, r3
 800069a:	f000 feac 	bl	80013f6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->ctrl_gpio[CTRL_E], lcd->ctrl_pin[CTRL_E], 0);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	2240      	movs	r2, #64	; 0x40
 80006a6:	5a9b      	ldrh	r3, [r3, r2]
 80006a8:	2200      	movs	r2, #0
 80006aa:	0019      	movs	r1, r3
 80006ac:	f000 fea3 	bl	80013f6 <HAL_GPIO_WritePin>
}
 80006b0:	46c0      	nop			; (mov r8, r8)
 80006b2:	46bd      	mov	sp, r7
 80006b4:	b004      	add	sp, #16
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <lcd_clear>:

void lcd_clear(lcd_t* lcd) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
	lcd_command(lcd, 1);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2101      	movs	r1, #1
 80006c4:	0018      	movs	r0, r3
 80006c6:	f7ff ffa7 	bl	8000618 <lcd_command>
	lcd_wait_avail(lcd);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	0018      	movs	r0, r3
 80006ce:	f7ff ff39 	bl	8000544 <lcd_wait_avail>
}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b002      	add	sp, #8
 80006d8:	bd80      	pop	{r7, pc}

080006da <lcd_write_line>:

void lcd_write_line(lcd_t* lcd, int line, char* str) {
 80006da:	b580      	push	{r7, lr}
 80006dc:	b084      	sub	sp, #16
 80006de:	af00      	add	r7, sp, #0
 80006e0:	60f8      	str	r0, [r7, #12]
 80006e2:	60b9      	str	r1, [r7, #8]
 80006e4:	607a      	str	r2, [r7, #4]
	lcd_command(lcd, 0b10000000 | line); // set ddram addr to correct line
 80006e6:	68bb      	ldr	r3, [r7, #8]
 80006e8:	b25b      	sxtb	r3, r3
 80006ea:	2280      	movs	r2, #128	; 0x80
 80006ec:	4252      	negs	r2, r2
 80006ee:	4313      	orrs	r3, r2
 80006f0:	b25b      	sxtb	r3, r3
 80006f2:	b2da      	uxtb	r2, r3
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	0011      	movs	r1, r2
 80006f8:	0018      	movs	r0, r3
 80006fa:	f7ff ff8d 	bl	8000618 <lcd_command>
	lcd_wait_avail(lcd);
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	0018      	movs	r0, r3
 8000702:	f7ff ff1f 	bl	8000544 <lcd_wait_avail>

	while (*str) {
 8000706:	e009      	b.n	800071c <lcd_write_line+0x42>
		lcd_write_char(lcd, *str);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	781a      	ldrb	r2, [r3, #0]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	0011      	movs	r1, r2
 8000710:	0018      	movs	r0, r3
 8000712:	f7ff fec7 	bl	80004a4 <lcd_write_char>
		str++;
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	3301      	adds	r3, #1
 800071a:	607b      	str	r3, [r7, #4]
	while (*str) {
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d1f1      	bne.n	8000708 <lcd_write_line+0x2e>
	}
}
 8000724:	46c0      	nop			; (mov r8, r8)
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	46bd      	mov	sp, r7
 800072a:	b004      	add	sp, #16
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000734:	f000 fb80 	bl	8000e38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000738:	f000 f892 	bl	8000860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073c:	f000 f960 	bl	8000a00 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000740:	f000 f8ec 	bl	800091c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000744:	f000 f928 	bl	8000998 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  lcd.data_gpio[0] = lcd_d0_GPIO_Port;
 8000748:	4b3b      	ldr	r3, [pc, #236]	; (8000838 <main+0x108>)
 800074a:	4a3c      	ldr	r2, [pc, #240]	; (800083c <main+0x10c>)
 800074c:	601a      	str	r2, [r3, #0]
  lcd.data_gpio[1] = lcd_d1_GPIO_Port;
 800074e:	4b3a      	ldr	r3, [pc, #232]	; (8000838 <main+0x108>)
 8000750:	4a3a      	ldr	r2, [pc, #232]	; (800083c <main+0x10c>)
 8000752:	605a      	str	r2, [r3, #4]
  lcd.data_gpio[2] = lcd_d2_GPIO_Port;
 8000754:	4b38      	ldr	r3, [pc, #224]	; (8000838 <main+0x108>)
 8000756:	4a39      	ldr	r2, [pc, #228]	; (800083c <main+0x10c>)
 8000758:	609a      	str	r2, [r3, #8]
  lcd.data_gpio[3] = lcd_d3_GPIO_Port;
 800075a:	4b37      	ldr	r3, [pc, #220]	; (8000838 <main+0x108>)
 800075c:	4a37      	ldr	r2, [pc, #220]	; (800083c <main+0x10c>)
 800075e:	60da      	str	r2, [r3, #12]
  lcd.data_gpio[4] = lcd_d4_GPIO_Port;
 8000760:	4b35      	ldr	r3, [pc, #212]	; (8000838 <main+0x108>)
 8000762:	4a36      	ldr	r2, [pc, #216]	; (800083c <main+0x10c>)
 8000764:	611a      	str	r2, [r3, #16]
  lcd.data_gpio[5] = lcd_d5_GPIO_Port;
 8000766:	4b34      	ldr	r3, [pc, #208]	; (8000838 <main+0x108>)
 8000768:	4a34      	ldr	r2, [pc, #208]	; (800083c <main+0x10c>)
 800076a:	615a      	str	r2, [r3, #20]
  lcd.data_gpio[6] = lcd_d6_GPIO_Port;
 800076c:	4b32      	ldr	r3, [pc, #200]	; (8000838 <main+0x108>)
 800076e:	4a34      	ldr	r2, [pc, #208]	; (8000840 <main+0x110>)
 8000770:	619a      	str	r2, [r3, #24]
  lcd.data_gpio[7] = lcd_d7_GPIO_Port;
 8000772:	4b31      	ldr	r3, [pc, #196]	; (8000838 <main+0x108>)
 8000774:	4a32      	ldr	r2, [pc, #200]	; (8000840 <main+0x110>)
 8000776:	61da      	str	r2, [r3, #28]
  lcd.data_pin[0] = lcd_d0_Pin;
 8000778:	4b2f      	ldr	r3, [pc, #188]	; (8000838 <main+0x108>)
 800077a:	2208      	movs	r2, #8
 800077c:	841a      	strh	r2, [r3, #32]
  lcd.data_pin[1] = lcd_d1_Pin;
 800077e:	4b2e      	ldr	r3, [pc, #184]	; (8000838 <main+0x108>)
 8000780:	2210      	movs	r2, #16
 8000782:	845a      	strh	r2, [r3, #34]	; 0x22
  lcd.data_pin[2] = lcd_d2_Pin;
 8000784:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <main+0x108>)
 8000786:	2220      	movs	r2, #32
 8000788:	849a      	strh	r2, [r3, #36]	; 0x24
  lcd.data_pin[3] = lcd_d3_Pin;
 800078a:	4b2b      	ldr	r3, [pc, #172]	; (8000838 <main+0x108>)
 800078c:	2240      	movs	r2, #64	; 0x40
 800078e:	84da      	strh	r2, [r3, #38]	; 0x26
  lcd.data_pin[4] = lcd_d4_Pin;
 8000790:	4b29      	ldr	r3, [pc, #164]	; (8000838 <main+0x108>)
 8000792:	2280      	movs	r2, #128	; 0x80
 8000794:	851a      	strh	r2, [r3, #40]	; 0x28
  lcd.data_pin[5] = lcd_d5_Pin;
 8000796:	4b28      	ldr	r3, [pc, #160]	; (8000838 <main+0x108>)
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	0052      	lsls	r2, r2, #1
 800079c:	855a      	strh	r2, [r3, #42]	; 0x2a
  lcd.data_pin[6] = lcd_d6_Pin;
 800079e:	4b26      	ldr	r3, [pc, #152]	; (8000838 <main+0x108>)
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	01d2      	lsls	r2, r2, #7
 80007a4:	859a      	strh	r2, [r3, #44]	; 0x2c
  lcd.data_pin[7] = lcd_d7_Pin;
 80007a6:	4b24      	ldr	r3, [pc, #144]	; (8000838 <main+0x108>)
 80007a8:	4a26      	ldr	r2, [pc, #152]	; (8000844 <main+0x114>)
 80007aa:	85da      	strh	r2, [r3, #46]	; 0x2e
  lcd.ctrl_gpio[CTRL_E] = lcd_e_GPIO_Port;
 80007ac:	4b22      	ldr	r3, [pc, #136]	; (8000838 <main+0x108>)
 80007ae:	22a0      	movs	r2, #160	; 0xa0
 80007b0:	05d2      	lsls	r2, r2, #23
 80007b2:	639a      	str	r2, [r3, #56]	; 0x38
  lcd.ctrl_gpio[CTRL_RS] = lcd_rs_GPIO_Port;
 80007b4:	4b20      	ldr	r3, [pc, #128]	; (8000838 <main+0x108>)
 80007b6:	22a0      	movs	r2, #160	; 0xa0
 80007b8:	05d2      	lsls	r2, r2, #23
 80007ba:	631a      	str	r2, [r3, #48]	; 0x30
  lcd.ctrl_gpio[CTRL_RW] = lcd_rw_GPIO_Port;
 80007bc:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <main+0x108>)
 80007be:	22a0      	movs	r2, #160	; 0xa0
 80007c0:	05d2      	lsls	r2, r2, #23
 80007c2:	635a      	str	r2, [r3, #52]	; 0x34
  lcd.ctrl_pin[CTRL_E] = lcd_e_Pin;
 80007c4:	4b1c      	ldr	r3, [pc, #112]	; (8000838 <main+0x108>)
 80007c6:	2240      	movs	r2, #64	; 0x40
 80007c8:	491e      	ldr	r1, [pc, #120]	; (8000844 <main+0x114>)
 80007ca:	5299      	strh	r1, [r3, r2]
  lcd.ctrl_pin[CTRL_RS] = lcd_rs_Pin;
 80007cc:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <main+0x108>)
 80007ce:	2280      	movs	r2, #128	; 0x80
 80007d0:	0112      	lsls	r2, r2, #4
 80007d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  lcd.ctrl_pin[CTRL_RW] = lcd_rw_Pin;
 80007d4:	4b18      	ldr	r3, [pc, #96]	; (8000838 <main+0x108>)
 80007d6:	2280      	movs	r2, #128	; 0x80
 80007d8:	0152      	lsls	r2, r2, #5
 80007da:	87da      	strh	r2, [r3, #62]	; 0x3e

  lcd_init(&lcd);
 80007dc:	4b16      	ldr	r3, [pc, #88]	; (8000838 <main+0x108>)
 80007de:	0018      	movs	r0, r3
 80007e0:	f7ff feea 	bl	80005b8 <lcd_init>
  lcd_clear(&lcd);
 80007e4:	4b14      	ldr	r3, [pc, #80]	; (8000838 <main+0x108>)
 80007e6:	0018      	movs	r0, r3
 80007e8:	f7ff ff66 	bl	80006b8 <lcd_clear>
  lcd_write_line(&lcd, LCD_LINE0, "0000_0000_0000_0000_");
 80007ec:	4a16      	ldr	r2, [pc, #88]	; (8000848 <main+0x118>)
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <main+0x108>)
 80007f0:	2100      	movs	r1, #0
 80007f2:	0018      	movs	r0, r3
 80007f4:	f7ff ff71 	bl	80006da <lcd_write_line>
  lcd_write_line(&lcd, LCD_LINE1, "1111_1111_1111_1111_");
 80007f8:	4a14      	ldr	r2, [pc, #80]	; (800084c <main+0x11c>)
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <main+0x108>)
 80007fc:	2140      	movs	r1, #64	; 0x40
 80007fe:	0018      	movs	r0, r3
 8000800:	f7ff ff6b 	bl	80006da <lcd_write_line>
  lcd_write_line(&lcd, LCD_LINE2, "2222_2222_2222_2222_");
 8000804:	4a12      	ldr	r2, [pc, #72]	; (8000850 <main+0x120>)
 8000806:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <main+0x108>)
 8000808:	2114      	movs	r1, #20
 800080a:	0018      	movs	r0, r3
 800080c:	f7ff ff65 	bl	80006da <lcd_write_line>
  lcd_write_line(&lcd, LCD_LINE3, "3333_3333_3333_3333_");
 8000810:	4a10      	ldr	r2, [pc, #64]	; (8000854 <main+0x124>)
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <main+0x108>)
 8000814:	2154      	movs	r1, #84	; 0x54
 8000816:	0018      	movs	r0, r3
 8000818:	f7ff ff5f 	bl	80006da <lcd_write_line>

  st25.nfc_irq_in_gpio = nfc_int_in_GPIO_Port;
 800081c:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <main+0x128>)
 800081e:	4a07      	ldr	r2, [pc, #28]	; (800083c <main+0x10c>)
 8000820:	605a      	str	r2, [r3, #4]
  st25.nfc_irq_in_pin = nfc_int_in_Pin;
 8000822:	4b0d      	ldr	r3, [pc, #52]	; (8000858 <main+0x128>)
 8000824:	2201      	movs	r2, #1
 8000826:	811a      	strh	r2, [r3, #8]
  st25.spi = &hspi1;
 8000828:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <main+0x128>)
 800082a:	4a0c      	ldr	r2, [pc, #48]	; (800085c <main+0x12c>)
 800082c:	601a      	str	r2, [r3, #0]
  st25_init(&st25);
 800082e:	4b0a      	ldr	r3, [pc, #40]	; (8000858 <main+0x128>)
 8000830:	0018      	movs	r0, r3
 8000832:	f000 f9b3 	bl	8000b9c <st25_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000836:	e7fe      	b.n	8000836 <main+0x106>
 8000838:	20000028 	.word	0x20000028
 800083c:	50000400 	.word	0x50000400
 8000840:	50000800 	.word	0x50000800
 8000844:	ffff8000 	.word	0xffff8000
 8000848:	08003628 	.word	0x08003628
 800084c:	08003640 	.word	0x08003640
 8000850:	08003658 	.word	0x08003658
 8000854:	08003670 	.word	0x08003670
 8000858:	2000006c 	.word	0x2000006c
 800085c:	20000478 	.word	0x20000478

08000860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b093      	sub	sp, #76	; 0x4c
 8000864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000866:	2410      	movs	r4, #16
 8000868:	193b      	adds	r3, r7, r4
 800086a:	0018      	movs	r0, r3
 800086c:	2338      	movs	r3, #56	; 0x38
 800086e:	001a      	movs	r2, r3
 8000870:	2100      	movs	r1, #0
 8000872:	f002 fec5 	bl	8003600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000876:	003b      	movs	r3, r7
 8000878:	0018      	movs	r0, r3
 800087a:	2310      	movs	r3, #16
 800087c:	001a      	movs	r2, r3
 800087e:	2100      	movs	r1, #0
 8000880:	f002 febe 	bl	8003600 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	0018      	movs	r0, r3
 800088a:	f000 fdd1 	bl	8001430 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800088e:	193b      	adds	r3, r7, r4
 8000890:	2202      	movs	r2, #2
 8000892:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000894:	193b      	adds	r3, r7, r4
 8000896:	2280      	movs	r2, #128	; 0x80
 8000898:	0052      	lsls	r2, r2, #1
 800089a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800089c:	0021      	movs	r1, r4
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	2240      	movs	r2, #64	; 0x40
 80008a8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008aa:	187b      	adds	r3, r7, r1
 80008ac:	2202      	movs	r2, #2
 80008ae:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008b0:	187b      	adds	r3, r7, r1
 80008b2:	2202      	movs	r2, #2
 80008b4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	2200      	movs	r2, #0
 80008ba:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2208      	movs	r2, #8
 80008c0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2280      	movs	r2, #128	; 0x80
 80008c6:	0292      	lsls	r2, r2, #10
 80008c8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2280      	movs	r2, #128	; 0x80
 80008ce:	0492      	lsls	r2, r2, #18
 80008d0:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2280      	movs	r2, #128	; 0x80
 80008d6:	0592      	lsls	r2, r2, #22
 80008d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008da:	187b      	adds	r3, r7, r1
 80008dc:	0018      	movs	r0, r3
 80008de:	f000 fdf3 	bl	80014c8 <HAL_RCC_OscConfig>
 80008e2:	1e03      	subs	r3, r0, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80008e6:	f000 f92d 	bl	8000b44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ea:	003b      	movs	r3, r7
 80008ec:	2207      	movs	r2, #7
 80008ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f0:	003b      	movs	r3, r7
 80008f2:	2202      	movs	r2, #2
 80008f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f6:	003b      	movs	r3, r7
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008fc:	003b      	movs	r3, r7
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000902:	003b      	movs	r3, r7
 8000904:	2102      	movs	r1, #2
 8000906:	0018      	movs	r0, r3
 8000908:	f001 f8fe 	bl	8001b08 <HAL_RCC_ClockConfig>
 800090c:	1e03      	subs	r3, r0, #0
 800090e:	d001      	beq.n	8000914 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000910:	f000 f918 	bl	8000b44 <Error_Handler>
  }
}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	b013      	add	sp, #76	; 0x4c
 800091a:	bd90      	pop	{r4, r7, pc}

0800091c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <MX_SPI1_Init+0x74>)
 8000922:	4a1c      	ldr	r2, [pc, #112]	; (8000994 <MX_SPI1_Init+0x78>)
 8000924:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000926:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <MX_SPI1_Init+0x74>)
 8000928:	2282      	movs	r2, #130	; 0x82
 800092a:	0052      	lsls	r2, r2, #1
 800092c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800092e:	4b18      	ldr	r3, [pc, #96]	; (8000990 <MX_SPI1_Init+0x74>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000934:	4b16      	ldr	r3, [pc, #88]	; (8000990 <MX_SPI1_Init+0x74>)
 8000936:	22e0      	movs	r2, #224	; 0xe0
 8000938:	00d2      	lsls	r2, r2, #3
 800093a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_SPI1_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000942:	4b13      	ldr	r3, [pc, #76]	; (8000990 <MX_SPI1_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_SPI1_Init+0x74>)
 800094a:	2280      	movs	r2, #128	; 0x80
 800094c:	02d2      	lsls	r2, r2, #11
 800094e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000950:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <MX_SPI1_Init+0x74>)
 8000952:	2228      	movs	r2, #40	; 0x28
 8000954:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_SPI1_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_SPI1_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_SPI1_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_SPI1_Init+0x74>)
 800096a:	2207      	movs	r2, #7
 800096c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_SPI1_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_SPI1_Init+0x74>)
 8000976:	2208      	movs	r2, #8
 8000978:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800097a:	4b05      	ldr	r3, [pc, #20]	; (8000990 <MX_SPI1_Init+0x74>)
 800097c:	0018      	movs	r0, r3
 800097e:	f001 fa6d 	bl	8001e5c <HAL_SPI_Init>
 8000982:	1e03      	subs	r3, r0, #0
 8000984:	d001      	beq.n	800098a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000986:	f000 f8dd 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20000478 	.word	0x20000478
 8000994:	40013000 	.word	0x40013000

08000998 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800099c:	4b16      	ldr	r3, [pc, #88]	; (80009f8 <MX_USART2_UART_Init+0x60>)
 800099e:	4a17      	ldr	r2, [pc, #92]	; (80009fc <MX_USART2_UART_Init+0x64>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <MX_USART2_UART_Init+0x60>)
 80009a4:	22e1      	movs	r2, #225	; 0xe1
 80009a6:	0252      	lsls	r2, r2, #9
 80009a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_USART2_UART_Init+0x60>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_USART2_UART_Init+0x60>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b10      	ldr	r3, [pc, #64]	; (80009f8 <MX_USART2_UART_Init+0x60>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_USART2_UART_Init+0x60>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b0d      	ldr	r3, [pc, #52]	; (80009f8 <MX_USART2_UART_Init+0x60>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_USART2_UART_Init+0x60>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <MX_USART2_UART_Init+0x60>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d4:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_USART2_UART_Init+0x60>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009da:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <MX_USART2_UART_Init+0x60>)
 80009dc:	2200      	movs	r2, #0
 80009de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <MX_USART2_UART_Init+0x60>)
 80009e2:	0018      	movs	r0, r3
 80009e4:	f002 f93c 	bl	8002c60 <HAL_UART_Init>
 80009e8:	1e03      	subs	r3, r0, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009ec:	f000 f8aa 	bl	8000b44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009f0:	46c0      	nop			; (mov r8, r8)
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	200004dc 	.word	0x200004dc
 80009fc:	40004400 	.word	0x40004400

08000a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b089      	sub	sp, #36	; 0x24
 8000a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a06:	240c      	movs	r4, #12
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	2314      	movs	r3, #20
 8000a0e:	001a      	movs	r2, r3
 8000a10:	2100      	movs	r1, #0
 8000a12:	f002 fdf5 	bl	8003600 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a16:	4b48      	ldr	r3, [pc, #288]	; (8000b38 <MX_GPIO_Init+0x138>)
 8000a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a1a:	4b47      	ldr	r3, [pc, #284]	; (8000b38 <MX_GPIO_Init+0x138>)
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	635a      	str	r2, [r3, #52]	; 0x34
 8000a22:	4b45      	ldr	r3, [pc, #276]	; (8000b38 <MX_GPIO_Init+0x138>)
 8000a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a26:	2204      	movs	r2, #4
 8000a28:	4013      	ands	r3, r2
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	4b42      	ldr	r3, [pc, #264]	; (8000b38 <MX_GPIO_Init+0x138>)
 8000a30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a32:	4b41      	ldr	r3, [pc, #260]	; (8000b38 <MX_GPIO_Init+0x138>)
 8000a34:	2101      	movs	r1, #1
 8000a36:	430a      	orrs	r2, r1
 8000a38:	635a      	str	r2, [r3, #52]	; 0x34
 8000a3a:	4b3f      	ldr	r3, [pc, #252]	; (8000b38 <MX_GPIO_Init+0x138>)
 8000a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4013      	ands	r3, r2
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a46:	4b3c      	ldr	r3, [pc, #240]	; (8000b38 <MX_GPIO_Init+0x138>)
 8000a48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a4a:	4b3b      	ldr	r3, [pc, #236]	; (8000b38 <MX_GPIO_Init+0x138>)
 8000a4c:	2102      	movs	r1, #2
 8000a4e:	430a      	orrs	r2, r1
 8000a50:	635a      	str	r2, [r3, #52]	; 0x34
 8000a52:	4b39      	ldr	r3, [pc, #228]	; (8000b38 <MX_GPIO_Init+0x138>)
 8000a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a56:	2202      	movs	r2, #2
 8000a58:	4013      	ands	r3, r2
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nfc_int_in_GPIO_Port, nfc_int_in_Pin, GPIO_PIN_SET);
 8000a5e:	4b37      	ldr	r3, [pc, #220]	; (8000b3c <MX_GPIO_Init+0x13c>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	2101      	movs	r1, #1
 8000a64:	0018      	movs	r0, r3
 8000a66:	f000 fcc6 	bl	80013f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, lcd_rs_Pin|lcd_rw_Pin|lcd_e_Pin, GPIO_PIN_RESET);
 8000a6a:	2398      	movs	r3, #152	; 0x98
 8000a6c:	0219      	lsls	r1, r3, #8
 8000a6e:	23a0      	movs	r3, #160	; 0xa0
 8000a70:	05db      	lsls	r3, r3, #23
 8000a72:	2200      	movs	r2, #0
 8000a74:	0018      	movs	r0, r3
 8000a76:	f000 fcbe 	bl	80013f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : lcd_d6_Pin lcd_d7_Pin */
  GPIO_InitStruct.Pin = lcd_d6_Pin|lcd_d7_Pin;
 8000a7a:	193b      	adds	r3, r7, r4
 8000a7c:	22c0      	movs	r2, #192	; 0xc0
 8000a7e:	0212      	lsls	r2, r2, #8
 8000a80:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a82:	193b      	adds	r3, r7, r4
 8000a84:	2200      	movs	r2, #0
 8000a86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	193b      	adds	r3, r7, r4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a8e:	193b      	adds	r3, r7, r4
 8000a90:	4a2b      	ldr	r2, [pc, #172]	; (8000b40 <MX_GPIO_Init+0x140>)
 8000a92:	0019      	movs	r1, r3
 8000a94:	0010      	movs	r0, r2
 8000a96:	f000 fb2d 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : nfc_int_out_Pin */
  GPIO_InitStruct.Pin = nfc_int_out_Pin;
 8000a9a:	193b      	adds	r3, r7, r4
 8000a9c:	2220      	movs	r2, #32
 8000a9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	2288      	movs	r2, #136	; 0x88
 8000aa4:	0352      	lsls	r2, r2, #13
 8000aa6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	193b      	adds	r3, r7, r4
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(nfc_int_out_GPIO_Port, &GPIO_InitStruct);
 8000aae:	193a      	adds	r2, r7, r4
 8000ab0:	23a0      	movs	r3, #160	; 0xa0
 8000ab2:	05db      	lsls	r3, r3, #23
 8000ab4:	0011      	movs	r1, r2
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f000 fb1c 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : nfc_int_in_Pin */
  GPIO_InitStruct.Pin = nfc_int_in_Pin;
 8000abc:	193b      	adds	r3, r7, r4
 8000abe:	2201      	movs	r2, #1
 8000ac0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	193b      	adds	r3, r7, r4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(nfc_int_in_GPIO_Port, &GPIO_InitStruct);
 8000ad4:	193b      	adds	r3, r7, r4
 8000ad6:	4a19      	ldr	r2, [pc, #100]	; (8000b3c <MX_GPIO_Init+0x13c>)
 8000ad8:	0019      	movs	r1, r3
 8000ada:	0010      	movs	r0, r2
 8000adc:	f000 fb0a 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_rs_Pin lcd_rw_Pin lcd_e_Pin */
  GPIO_InitStruct.Pin = lcd_rs_Pin|lcd_rw_Pin|lcd_e_Pin;
 8000ae0:	0021      	movs	r1, r4
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	2298      	movs	r2, #152	; 0x98
 8000ae6:	0212      	lsls	r2, r2, #8
 8000ae8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aea:	000c      	movs	r4, r1
 8000aec:	193b      	adds	r3, r7, r4
 8000aee:	2201      	movs	r2, #1
 8000af0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	193b      	adds	r3, r7, r4
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	193b      	adds	r3, r7, r4
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	193a      	adds	r2, r7, r4
 8000b00:	23a0      	movs	r3, #160	; 0xa0
 8000b02:	05db      	lsls	r3, r3, #23
 8000b04:	0011      	movs	r1, r2
 8000b06:	0018      	movs	r0, r3
 8000b08:	f000 faf4 	bl	80010f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_d0_Pin lcd_d1_Pin lcd_d2_Pin lcd_d3_Pin
                           lcd_d4_Pin lcd_d5_Pin */
  GPIO_InitStruct.Pin = lcd_d0_Pin|lcd_d1_Pin|lcd_d2_Pin|lcd_d3_Pin
 8000b0c:	0021      	movs	r1, r4
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	22fc      	movs	r2, #252	; 0xfc
 8000b12:	0052      	lsls	r2, r2, #1
 8000b14:	601a      	str	r2, [r3, #0]
                          |lcd_d4_Pin|lcd_d5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b16:	187b      	adds	r3, r7, r1
 8000b18:	2200      	movs	r2, #0
 8000b1a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <MX_GPIO_Init+0x13c>)
 8000b26:	0019      	movs	r1, r3
 8000b28:	0010      	movs	r0, r2
 8000b2a:	f000 fae3 	bl	80010f4 <HAL_GPIO_Init>

}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b009      	add	sp, #36	; 0x24
 8000b34:	bd90      	pop	{r4, r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	50000400 	.word	0x50000400
 8000b40:	50000800 	.word	0x50000800

08000b44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b48:	b672      	cpsid	i
}
 8000b4a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <Error_Handler+0x8>

08000b4e <st25_poll_response>:

void st25_send_command(st25_t* st25, uint8_t command, uint8_t len, uint8_t *data) {

}

void st25_poll_response(st25_t* st25) {
 8000b4e:	b590      	push	{r4, r7, lr}
 8000b50:	b085      	sub	sp, #20
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	6078      	str	r0, [r7, #4]
	uint8_t poll_cmd = 0x03;
 8000b56:	230f      	movs	r3, #15
 8000b58:	18fb      	adds	r3, r7, r3
 8000b5a:	2203      	movs	r2, #3
 8000b5c:	701a      	strb	r2, [r3, #0]
	uint8_t poll_rsp = 0;
 8000b5e:	230e      	movs	r3, #14
 8000b60:	18fb      	adds	r3, r7, r3
 8000b62:	2200      	movs	r2, #0
 8000b64:	701a      	strb	r2, [r3, #0]
	do {
		HAL_SPI_Transmit(st25->spi, &poll_cmd, 1, 100);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6818      	ldr	r0, [r3, #0]
 8000b6a:	230f      	movs	r3, #15
 8000b6c:	18f9      	adds	r1, r7, r3
 8000b6e:	2364      	movs	r3, #100	; 0x64
 8000b70:	2201      	movs	r2, #1
 8000b72:	f001 fa2b 	bl	8001fcc <HAL_SPI_Transmit>
		HAL_SPI_Receive(st25->spi, &poll_rsp, 1, 100);
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6818      	ldr	r0, [r3, #0]
 8000b7a:	240e      	movs	r4, #14
 8000b7c:	1939      	adds	r1, r7, r4
 8000b7e:	2364      	movs	r3, #100	; 0x64
 8000b80:	2201      	movs	r2, #1
 8000b82:	f001 fb7b 	bl	800227c <HAL_SPI_Receive>
	} while (!(poll_rsp & 0b1000));
 8000b86:	193b      	adds	r3, r7, r4
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	001a      	movs	r2, r3
 8000b8c:	2308      	movs	r3, #8
 8000b8e:	4013      	ands	r3, r2
 8000b90:	d0e9      	beq.n	8000b66 <st25_poll_response+0x18>
}
 8000b92:	46c0      	nop			; (mov r8, r8)
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b005      	add	sp, #20
 8000b9a:	bd90      	pop	{r4, r7, pc}

08000b9c <st25_init>:


void st25_init(st25_t* st25) {
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b089      	sub	sp, #36	; 0x24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(st25->nfc_irq_in_gpio, st25->nfc_irq_in_pin, 0);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6858      	ldr	r0, [r3, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	891b      	ldrh	r3, [r3, #8]
 8000bac:	2200      	movs	r2, #0
 8000bae:	0019      	movs	r1, r3
 8000bb0:	f000 fc21 	bl	80013f6 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f000 f9c5 	bl	8000f44 <HAL_Delay>
	HAL_GPIO_WritePin(st25->nfc_irq_in_gpio, st25->nfc_irq_in_pin, 1);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6858      	ldr	r0, [r3, #4]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	891b      	ldrh	r3, [r3, #8]
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	0019      	movs	r1, r3
 8000bc6:	f000 fc16 	bl	80013f6 <HAL_GPIO_WritePin>
	uint8_t id_cmd[3] = {0, 1, 0};
 8000bca:	241c      	movs	r4, #28
 8000bcc:	193b      	adds	r3, r7, r4
 8000bce:	4a19      	ldr	r2, [pc, #100]	; (8000c34 <st25_init+0x98>)
 8000bd0:	8811      	ldrh	r1, [r2, #0]
 8000bd2:	8019      	strh	r1, [r3, #0]
 8000bd4:	7892      	ldrb	r2, [r2, #2]
 8000bd6:	709a      	strb	r2, [r3, #2]
	uint8_t id_resp[2];

	HAL_SPI_Transmit(st25->spi, id_cmd, 3, 100);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6818      	ldr	r0, [r3, #0]
 8000bdc:	1939      	adds	r1, r7, r4
 8000bde:	2364      	movs	r3, #100	; 0x64
 8000be0:	2203      	movs	r2, #3
 8000be2:	f001 f9f3 	bl	8001fcc <HAL_SPI_Transmit>
	st25_poll_response(st25);
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	0018      	movs	r0, r3
 8000bea:	f7ff ffb0 	bl	8000b4e <st25_poll_response>

	uint8_t readcmd = 0x2;
 8000bee:	2117      	movs	r1, #23
 8000bf0:	187b      	adds	r3, r7, r1
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(st25->spi, &readcmd, 1, 100);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6818      	ldr	r0, [r3, #0]
 8000bfa:	1879      	adds	r1, r7, r1
 8000bfc:	2364      	movs	r3, #100	; 0x64
 8000bfe:	2201      	movs	r2, #1
 8000c00:	f001 f9e4 	bl	8001fcc <HAL_SPI_Transmit>
	HAL_SPI_Receive(st25->spi, id_resp, 2, 100);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6818      	ldr	r0, [r3, #0]
 8000c08:	2318      	movs	r3, #24
 8000c0a:	18f9      	adds	r1, r7, r3
 8000c0c:	2364      	movs	r3, #100	; 0x64
 8000c0e:	2202      	movs	r2, #2
 8000c10:	f001 fb34 	bl	800227c <HAL_SPI_Receive>

	// proto iso14443-a, 106kbps tx and rx, last 3 bytes default
	uint8_t proto_select[] = {0, 0x02, 5, 0x02, 0x00, 0, 0, 0};
 8000c14:	210c      	movs	r1, #12
 8000c16:	187b      	adds	r3, r7, r1
 8000c18:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <st25_init+0x9c>)
 8000c1a:	ca11      	ldmia	r2!, {r0, r4}
 8000c1c:	c311      	stmia	r3!, {r0, r4}
	HAL_SPI_Transmit(st25->spi, proto_select, 7, 100);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6818      	ldr	r0, [r3, #0]
 8000c22:	1879      	adds	r1, r7, r1
 8000c24:	2364      	movs	r3, #100	; 0x64
 8000c26:	2207      	movs	r2, #7
 8000c28:	f001 f9d0 	bl	8001fcc <HAL_SPI_Transmit>

}
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	b009      	add	sp, #36	; 0x24
 8000c32:	bd90      	pop	{r4, r7, pc}
 8000c34:	08003688 	.word	0x08003688
 8000c38:	0800368c 	.word	0x0800368c

08000c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <HAL_MspInit+0x44>)
 8000c44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <HAL_MspInit+0x44>)
 8000c48:	2101      	movs	r1, #1
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	641a      	str	r2, [r3, #64]	; 0x40
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <HAL_MspInit+0x44>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	2201      	movs	r2, #1
 8000c54:	4013      	ands	r3, r2
 8000c56:	607b      	str	r3, [r7, #4]
 8000c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <HAL_MspInit+0x44>)
 8000c5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c5e:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <HAL_MspInit+0x44>)
 8000c60:	2180      	movs	r1, #128	; 0x80
 8000c62:	0549      	lsls	r1, r1, #21
 8000c64:	430a      	orrs	r2, r1
 8000c66:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <HAL_MspInit+0x44>)
 8000c6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c6c:	2380      	movs	r3, #128	; 0x80
 8000c6e:	055b      	lsls	r3, r3, #21
 8000c70:	4013      	ands	r3, r2
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	b002      	add	sp, #8
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	40021000 	.word	0x40021000

08000c84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c84:	b590      	push	{r4, r7, lr}
 8000c86:	b08b      	sub	sp, #44	; 0x2c
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	2414      	movs	r4, #20
 8000c8e:	193b      	adds	r3, r7, r4
 8000c90:	0018      	movs	r0, r3
 8000c92:	2314      	movs	r3, #20
 8000c94:	001a      	movs	r2, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	f002 fcb2 	bl	8003600 <memset>
  if(hspi->Instance==SPI1)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a1b      	ldr	r2, [pc, #108]	; (8000d10 <HAL_SPI_MspInit+0x8c>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d130      	bne.n	8000d08 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ca6:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <HAL_SPI_MspInit+0x90>)
 8000ca8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000caa:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <HAL_SPI_MspInit+0x90>)
 8000cac:	2180      	movs	r1, #128	; 0x80
 8000cae:	0149      	lsls	r1, r1, #5
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	641a      	str	r2, [r3, #64]	; 0x40
 8000cb4:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <HAL_SPI_MspInit+0x90>)
 8000cb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cb8:	2380      	movs	r3, #128	; 0x80
 8000cba:	015b      	lsls	r3, r3, #5
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
 8000cc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <HAL_SPI_MspInit+0x90>)
 8000cc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cc6:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <HAL_SPI_MspInit+0x90>)
 8000cc8:	2101      	movs	r1, #1
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	635a      	str	r2, [r3, #52]	; 0x34
 8000cce:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <HAL_SPI_MspInit+0x90>)
 8000cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60fb      	str	r3, [r7, #12]
 8000cd8:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> SPI1_SCK
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8000cda:	0021      	movs	r1, r4
 8000cdc:	187b      	adds	r3, r7, r1
 8000cde:	22d2      	movs	r2, #210	; 0xd2
 8000ce0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	2202      	movs	r2, #2
 8000ce6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	187b      	adds	r3, r7, r1
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	187b      	adds	r3, r7, r1
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfa:	187a      	adds	r2, r7, r1
 8000cfc:	23a0      	movs	r3, #160	; 0xa0
 8000cfe:	05db      	lsls	r3, r3, #23
 8000d00:	0011      	movs	r1, r2
 8000d02:	0018      	movs	r0, r3
 8000d04:	f000 f9f6 	bl	80010f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b00b      	add	sp, #44	; 0x2c
 8000d0e:	bd90      	pop	{r4, r7, pc}
 8000d10:	40013000 	.word	0x40013000
 8000d14:	40021000 	.word	0x40021000

08000d18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d18:	b590      	push	{r4, r7, lr}
 8000d1a:	b08b      	sub	sp, #44	; 0x2c
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	2414      	movs	r4, #20
 8000d22:	193b      	adds	r3, r7, r4
 8000d24:	0018      	movs	r0, r3
 8000d26:	2314      	movs	r3, #20
 8000d28:	001a      	movs	r2, r3
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	f002 fc68 	bl	8003600 <memset>
  if(huart->Instance==USART2)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a1b      	ldr	r2, [pc, #108]	; (8000da4 <HAL_UART_MspInit+0x8c>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d130      	bne.n	8000d9c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d3a:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <HAL_UART_MspInit+0x90>)
 8000d3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <HAL_UART_MspInit+0x90>)
 8000d40:	2180      	movs	r1, #128	; 0x80
 8000d42:	0289      	lsls	r1, r1, #10
 8000d44:	430a      	orrs	r2, r1
 8000d46:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d48:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <HAL_UART_MspInit+0x90>)
 8000d4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d4c:	2380      	movs	r3, #128	; 0x80
 8000d4e:	029b      	lsls	r3, r3, #10
 8000d50:	4013      	ands	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d56:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <HAL_UART_MspInit+0x90>)
 8000d58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <HAL_UART_MspInit+0x90>)
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	430a      	orrs	r2, r1
 8000d60:	635a      	str	r2, [r3, #52]	; 0x34
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <HAL_UART_MspInit+0x90>)
 8000d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d66:	2201      	movs	r2, #1
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d6e:	0021      	movs	r1, r4
 8000d70:	187b      	adds	r3, r7, r1
 8000d72:	220c      	movs	r2, #12
 8000d74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	2202      	movs	r2, #2
 8000d7a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	187b      	adds	r3, r7, r1
 8000d7e:	2200      	movs	r2, #0
 8000d80:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	187b      	adds	r3, r7, r1
 8000d84:	2200      	movs	r2, #0
 8000d86:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8e:	187a      	adds	r2, r7, r1
 8000d90:	23a0      	movs	r3, #160	; 0xa0
 8000d92:	05db      	lsls	r3, r3, #23
 8000d94:	0011      	movs	r1, r2
 8000d96:	0018      	movs	r0, r3
 8000d98:	f000 f9ac 	bl	80010f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d9c:	46c0      	nop			; (mov r8, r8)
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b00b      	add	sp, #44	; 0x2c
 8000da2:	bd90      	pop	{r4, r7, pc}
 8000da4:	40004400 	.word	0x40004400
 8000da8:	40021000 	.word	0x40021000

08000dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <NMI_Handler+0x4>

08000db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <HardFault_Handler+0x4>

08000db8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000dbc:	46c0      	nop			; (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}

08000dc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd0:	f000 f89c 	bl	8000f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000de4:	480d      	ldr	r0, [pc, #52]	; (8000e1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000de6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000de8:	f7ff fff7 	bl	8000dda <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dec:	480c      	ldr	r0, [pc, #48]	; (8000e20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dee:	490d      	ldr	r1, [pc, #52]	; (8000e24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000df0:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <LoopForever+0xe>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df4:	e002      	b.n	8000dfc <LoopCopyDataInit>

08000df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfa:	3304      	adds	r3, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e00:	d3f9      	bcc.n	8000df6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e02:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e04:	4c0a      	ldr	r4, [pc, #40]	; (8000e30 <LoopForever+0x16>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e08:	e001      	b.n	8000e0e <LoopFillZerobss>

08000e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0c:	3204      	adds	r2, #4

08000e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e10:	d3fb      	bcc.n	8000e0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e12:	f002 fbd1 	bl	80035b8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000e16:	f7ff fc8b 	bl	8000730 <main>

08000e1a <LoopForever>:

LoopForever:
  b LoopForever
 8000e1a:	e7fe      	b.n	8000e1a <LoopForever>
  ldr   r0, =_estack
 8000e1c:	20004800 	.word	0x20004800
  ldr r0, =_sdata
 8000e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e28:	0800371c 	.word	0x0800371c
  ldr r2, =_sbss
 8000e2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e30:	20000570 	.word	0x20000570

08000e34 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e34:	e7fe      	b.n	8000e34 <ADC1_COMP_IRQHandler>
	...

08000e38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e3e:	1dfb      	adds	r3, r7, #7
 8000e40:	2200      	movs	r2, #0
 8000e42:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e44:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <HAL_Init+0x3c>)
 8000e46:	681a      	ldr	r2, [r3, #0]
 8000e48:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <HAL_Init+0x3c>)
 8000e4a:	2180      	movs	r1, #128	; 0x80
 8000e4c:	0049      	lsls	r1, r1, #1
 8000e4e:	430a      	orrs	r2, r1
 8000e50:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e52:	2003      	movs	r0, #3
 8000e54:	f000 f810 	bl	8000e78 <HAL_InitTick>
 8000e58:	1e03      	subs	r3, r0, #0
 8000e5a:	d003      	beq.n	8000e64 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e5c:	1dfb      	adds	r3, r7, #7
 8000e5e:	2201      	movs	r2, #1
 8000e60:	701a      	strb	r2, [r3, #0]
 8000e62:	e001      	b.n	8000e68 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000e64:	f7ff feea 	bl	8000c3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e68:	1dfb      	adds	r3, r7, #7
 8000e6a:	781b      	ldrb	r3, [r3, #0]
}
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	b002      	add	sp, #8
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40022000 	.word	0x40022000

08000e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b590      	push	{r4, r7, lr}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e80:	230f      	movs	r3, #15
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	2200      	movs	r2, #0
 8000e86:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000e88:	4b1d      	ldr	r3, [pc, #116]	; (8000f00 <HAL_InitTick+0x88>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d02b      	beq.n	8000ee8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000e90:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <HAL_InitTick+0x8c>)
 8000e92:	681c      	ldr	r4, [r3, #0]
 8000e94:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <HAL_InitTick+0x88>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	0019      	movs	r1, r3
 8000e9a:	23fa      	movs	r3, #250	; 0xfa
 8000e9c:	0098      	lsls	r0, r3, #2
 8000e9e:	f7ff f92f 	bl	8000100 <__udivsi3>
 8000ea2:	0003      	movs	r3, r0
 8000ea4:	0019      	movs	r1, r3
 8000ea6:	0020      	movs	r0, r4
 8000ea8:	f7ff f92a 	bl	8000100 <__udivsi3>
 8000eac:	0003      	movs	r3, r0
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f000 f913 	bl	80010da <HAL_SYSTICK_Config>
 8000eb4:	1e03      	subs	r3, r0, #0
 8000eb6:	d112      	bne.n	8000ede <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2b03      	cmp	r3, #3
 8000ebc:	d80a      	bhi.n	8000ed4 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	425b      	negs	r3, r3
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f000 f8f2 	bl	80010b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ecc:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <HAL_InitTick+0x90>)
 8000ece:	687a      	ldr	r2, [r7, #4]
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	e00d      	b.n	8000ef0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	18fb      	adds	r3, r7, r3
 8000ed8:	2201      	movs	r2, #1
 8000eda:	701a      	strb	r2, [r3, #0]
 8000edc:	e008      	b.n	8000ef0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ede:	230f      	movs	r3, #15
 8000ee0:	18fb      	adds	r3, r7, r3
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	701a      	strb	r2, [r3, #0]
 8000ee6:	e003      	b.n	8000ef0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ee8:	230f      	movs	r3, #15
 8000eea:	18fb      	adds	r3, r7, r3
 8000eec:	2201      	movs	r2, #1
 8000eee:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ef0:	230f      	movs	r3, #15
 8000ef2:	18fb      	adds	r3, r7, r3
 8000ef4:	781b      	ldrb	r3, [r3, #0]
}
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b005      	add	sp, #20
 8000efc:	bd90      	pop	{r4, r7, pc}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	20000008 	.word	0x20000008
 8000f04:	20000000 	.word	0x20000000
 8000f08:	20000004 	.word	0x20000004

08000f0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <HAL_IncTick+0x1c>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	001a      	movs	r2, r3
 8000f16:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <HAL_IncTick+0x20>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	18d2      	adds	r2, r2, r3
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <HAL_IncTick+0x20>)
 8000f1e:	601a      	str	r2, [r3, #0]
}
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	2000056c 	.word	0x2000056c

08000f30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  return uwTick;
 8000f34:	4b02      	ldr	r3, [pc, #8]	; (8000f40 <HAL_GetTick+0x10>)
 8000f36:	681b      	ldr	r3, [r3, #0]
}
 8000f38:	0018      	movs	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	2000056c 	.word	0x2000056c

08000f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f4c:	f7ff fff0 	bl	8000f30 <HAL_GetTick>
 8000f50:	0003      	movs	r3, r0
 8000f52:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	d005      	beq.n	8000f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <HAL_Delay+0x44>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	001a      	movs	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	189b      	adds	r3, r3, r2
 8000f68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f6a:	46c0      	nop			; (mov r8, r8)
 8000f6c:	f7ff ffe0 	bl	8000f30 <HAL_GetTick>
 8000f70:	0002      	movs	r2, r0
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d8f7      	bhi.n	8000f6c <HAL_Delay+0x28>
  {
  }
}
 8000f7c:	46c0      	nop			; (mov r8, r8)
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b004      	add	sp, #16
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	20000008 	.word	0x20000008

08000f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	0002      	movs	r2, r0
 8000f94:	6039      	str	r1, [r7, #0]
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f9a:	1dfb      	adds	r3, r7, #7
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b7f      	cmp	r3, #127	; 0x7f
 8000fa0:	d828      	bhi.n	8000ff4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fa2:	4a2f      	ldr	r2, [pc, #188]	; (8001060 <__NVIC_SetPriority+0xd4>)
 8000fa4:	1dfb      	adds	r3, r7, #7
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	b25b      	sxtb	r3, r3
 8000faa:	089b      	lsrs	r3, r3, #2
 8000fac:	33c0      	adds	r3, #192	; 0xc0
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	589b      	ldr	r3, [r3, r2]
 8000fb2:	1dfa      	adds	r2, r7, #7
 8000fb4:	7812      	ldrb	r2, [r2, #0]
 8000fb6:	0011      	movs	r1, r2
 8000fb8:	2203      	movs	r2, #3
 8000fba:	400a      	ands	r2, r1
 8000fbc:	00d2      	lsls	r2, r2, #3
 8000fbe:	21ff      	movs	r1, #255	; 0xff
 8000fc0:	4091      	lsls	r1, r2
 8000fc2:	000a      	movs	r2, r1
 8000fc4:	43d2      	mvns	r2, r2
 8000fc6:	401a      	ands	r2, r3
 8000fc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	019b      	lsls	r3, r3, #6
 8000fce:	22ff      	movs	r2, #255	; 0xff
 8000fd0:	401a      	ands	r2, r3
 8000fd2:	1dfb      	adds	r3, r7, #7
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	2303      	movs	r3, #3
 8000fda:	4003      	ands	r3, r0
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fe0:	481f      	ldr	r0, [pc, #124]	; (8001060 <__NVIC_SetPriority+0xd4>)
 8000fe2:	1dfb      	adds	r3, r7, #7
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	b25b      	sxtb	r3, r3
 8000fe8:	089b      	lsrs	r3, r3, #2
 8000fea:	430a      	orrs	r2, r1
 8000fec:	33c0      	adds	r3, #192	; 0xc0
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ff2:	e031      	b.n	8001058 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ff4:	4a1b      	ldr	r2, [pc, #108]	; (8001064 <__NVIC_SetPriority+0xd8>)
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	0019      	movs	r1, r3
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	400b      	ands	r3, r1
 8001000:	3b08      	subs	r3, #8
 8001002:	089b      	lsrs	r3, r3, #2
 8001004:	3306      	adds	r3, #6
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	18d3      	adds	r3, r2, r3
 800100a:	3304      	adds	r3, #4
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	1dfa      	adds	r2, r7, #7
 8001010:	7812      	ldrb	r2, [r2, #0]
 8001012:	0011      	movs	r1, r2
 8001014:	2203      	movs	r2, #3
 8001016:	400a      	ands	r2, r1
 8001018:	00d2      	lsls	r2, r2, #3
 800101a:	21ff      	movs	r1, #255	; 0xff
 800101c:	4091      	lsls	r1, r2
 800101e:	000a      	movs	r2, r1
 8001020:	43d2      	mvns	r2, r2
 8001022:	401a      	ands	r2, r3
 8001024:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	019b      	lsls	r3, r3, #6
 800102a:	22ff      	movs	r2, #255	; 0xff
 800102c:	401a      	ands	r2, r3
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	0018      	movs	r0, r3
 8001034:	2303      	movs	r3, #3
 8001036:	4003      	ands	r3, r0
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800103c:	4809      	ldr	r0, [pc, #36]	; (8001064 <__NVIC_SetPriority+0xd8>)
 800103e:	1dfb      	adds	r3, r7, #7
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	001c      	movs	r4, r3
 8001044:	230f      	movs	r3, #15
 8001046:	4023      	ands	r3, r4
 8001048:	3b08      	subs	r3, #8
 800104a:	089b      	lsrs	r3, r3, #2
 800104c:	430a      	orrs	r2, r1
 800104e:	3306      	adds	r3, #6
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	18c3      	adds	r3, r0, r3
 8001054:	3304      	adds	r3, #4
 8001056:	601a      	str	r2, [r3, #0]
}
 8001058:	46c0      	nop			; (mov r8, r8)
 800105a:	46bd      	mov	sp, r7
 800105c:	b003      	add	sp, #12
 800105e:	bd90      	pop	{r4, r7, pc}
 8001060:	e000e100 	.word	0xe000e100
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	1e5a      	subs	r2, r3, #1
 8001074:	2380      	movs	r3, #128	; 0x80
 8001076:	045b      	lsls	r3, r3, #17
 8001078:	429a      	cmp	r2, r3
 800107a:	d301      	bcc.n	8001080 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800107c:	2301      	movs	r3, #1
 800107e:	e010      	b.n	80010a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <SysTick_Config+0x44>)
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	3a01      	subs	r2, #1
 8001086:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001088:	2301      	movs	r3, #1
 800108a:	425b      	negs	r3, r3
 800108c:	2103      	movs	r1, #3
 800108e:	0018      	movs	r0, r3
 8001090:	f7ff ff7c 	bl	8000f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <SysTick_Config+0x44>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109a:	4b04      	ldr	r3, [pc, #16]	; (80010ac <SysTick_Config+0x44>)
 800109c:	2207      	movs	r2, #7
 800109e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	0018      	movs	r0, r3
 80010a4:	46bd      	mov	sp, r7
 80010a6:	b002      	add	sp, #8
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	46c0      	nop			; (mov r8, r8)
 80010ac:	e000e010 	.word	0xe000e010

080010b0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60b9      	str	r1, [r7, #8]
 80010b8:	607a      	str	r2, [r7, #4]
 80010ba:	210f      	movs	r1, #15
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	1c02      	adds	r2, r0, #0
 80010c0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80010c2:	68ba      	ldr	r2, [r7, #8]
 80010c4:	187b      	adds	r3, r7, r1
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	b25b      	sxtb	r3, r3
 80010ca:	0011      	movs	r1, r2
 80010cc:	0018      	movs	r0, r3
 80010ce:	f7ff ff5d 	bl	8000f8c <__NVIC_SetPriority>
}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	46bd      	mov	sp, r7
 80010d6:	b004      	add	sp, #16
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	0018      	movs	r0, r3
 80010e6:	f7ff ffbf 	bl	8001068 <SysTick_Config>
 80010ea:	0003      	movs	r3, r0
}
 80010ec:	0018      	movs	r0, r3
 80010ee:	46bd      	mov	sp, r7
 80010f0:	b002      	add	sp, #8
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001102:	e147      	b.n	8001394 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2101      	movs	r1, #1
 800110a:	697a      	ldr	r2, [r7, #20]
 800110c:	4091      	lsls	r1, r2
 800110e:	000a      	movs	r2, r1
 8001110:	4013      	ands	r3, r2
 8001112:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d100      	bne.n	800111c <HAL_GPIO_Init+0x28>
 800111a:	e138      	b.n	800138e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2203      	movs	r2, #3
 8001122:	4013      	ands	r3, r2
 8001124:	2b01      	cmp	r3, #1
 8001126:	d005      	beq.n	8001134 <HAL_GPIO_Init+0x40>
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2203      	movs	r2, #3
 800112e:	4013      	ands	r3, r2
 8001130:	2b02      	cmp	r3, #2
 8001132:	d130      	bne.n	8001196 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	2203      	movs	r2, #3
 8001140:	409a      	lsls	r2, r3
 8001142:	0013      	movs	r3, r2
 8001144:	43da      	mvns	r2, r3
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	4013      	ands	r3, r2
 800114a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	68da      	ldr	r2, [r3, #12]
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	409a      	lsls	r2, r3
 8001156:	0013      	movs	r3, r2
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800116a:	2201      	movs	r2, #1
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	409a      	lsls	r2, r3
 8001170:	0013      	movs	r3, r2
 8001172:	43da      	mvns	r2, r3
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	4013      	ands	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	091b      	lsrs	r3, r3, #4
 8001180:	2201      	movs	r2, #1
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	409a      	lsls	r2, r3
 8001188:	0013      	movs	r3, r2
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	2203      	movs	r2, #3
 800119c:	4013      	ands	r3, r2
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d017      	beq.n	80011d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	2203      	movs	r2, #3
 80011ae:	409a      	lsls	r2, r3
 80011b0:	0013      	movs	r3, r2
 80011b2:	43da      	mvns	r2, r3
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	4013      	ands	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	409a      	lsls	r2, r3
 80011c4:	0013      	movs	r3, r2
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2203      	movs	r2, #3
 80011d8:	4013      	ands	r3, r2
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d123      	bne.n	8001226 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	08da      	lsrs	r2, r3, #3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3208      	adds	r2, #8
 80011e6:	0092      	lsls	r2, r2, #2
 80011e8:	58d3      	ldr	r3, [r2, r3]
 80011ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	2207      	movs	r2, #7
 80011f0:	4013      	ands	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	220f      	movs	r2, #15
 80011f6:	409a      	lsls	r2, r3
 80011f8:	0013      	movs	r3, r2
 80011fa:	43da      	mvns	r2, r3
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	691a      	ldr	r2, [r3, #16]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	2107      	movs	r1, #7
 800120a:	400b      	ands	r3, r1
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	409a      	lsls	r2, r3
 8001210:	0013      	movs	r3, r2
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	08da      	lsrs	r2, r3, #3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3208      	adds	r2, #8
 8001220:	0092      	lsls	r2, r2, #2
 8001222:	6939      	ldr	r1, [r7, #16]
 8001224:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	2203      	movs	r2, #3
 8001232:	409a      	lsls	r2, r3
 8001234:	0013      	movs	r3, r2
 8001236:	43da      	mvns	r2, r3
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	4013      	ands	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2203      	movs	r2, #3
 8001244:	401a      	ands	r2, r3
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	409a      	lsls	r2, r3
 800124c:	0013      	movs	r3, r2
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685a      	ldr	r2, [r3, #4]
 800125e:	23c0      	movs	r3, #192	; 0xc0
 8001260:	029b      	lsls	r3, r3, #10
 8001262:	4013      	ands	r3, r2
 8001264:	d100      	bne.n	8001268 <HAL_GPIO_Init+0x174>
 8001266:	e092      	b.n	800138e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001268:	4a50      	ldr	r2, [pc, #320]	; (80013ac <HAL_GPIO_Init+0x2b8>)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3318      	adds	r3, #24
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	589b      	ldr	r3, [r3, r2]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	2203      	movs	r2, #3
 800127a:	4013      	ands	r3, r2
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	220f      	movs	r2, #15
 8001280:	409a      	lsls	r2, r3
 8001282:	0013      	movs	r3, r2
 8001284:	43da      	mvns	r2, r3
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	23a0      	movs	r3, #160	; 0xa0
 8001290:	05db      	lsls	r3, r3, #23
 8001292:	429a      	cmp	r2, r3
 8001294:	d013      	beq.n	80012be <HAL_GPIO_Init+0x1ca>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a45      	ldr	r2, [pc, #276]	; (80013b0 <HAL_GPIO_Init+0x2bc>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d00d      	beq.n	80012ba <HAL_GPIO_Init+0x1c6>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4a44      	ldr	r2, [pc, #272]	; (80013b4 <HAL_GPIO_Init+0x2c0>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d007      	beq.n	80012b6 <HAL_GPIO_Init+0x1c2>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a43      	ldr	r2, [pc, #268]	; (80013b8 <HAL_GPIO_Init+0x2c4>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d101      	bne.n	80012b2 <HAL_GPIO_Init+0x1be>
 80012ae:	2303      	movs	r3, #3
 80012b0:	e006      	b.n	80012c0 <HAL_GPIO_Init+0x1cc>
 80012b2:	2305      	movs	r3, #5
 80012b4:	e004      	b.n	80012c0 <HAL_GPIO_Init+0x1cc>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e002      	b.n	80012c0 <HAL_GPIO_Init+0x1cc>
 80012ba:	2301      	movs	r3, #1
 80012bc:	e000      	b.n	80012c0 <HAL_GPIO_Init+0x1cc>
 80012be:	2300      	movs	r3, #0
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	2103      	movs	r1, #3
 80012c4:	400a      	ands	r2, r1
 80012c6:	00d2      	lsls	r2, r2, #3
 80012c8:	4093      	lsls	r3, r2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80012d0:	4936      	ldr	r1, [pc, #216]	; (80013ac <HAL_GPIO_Init+0x2b8>)
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3318      	adds	r3, #24
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012de:	4a33      	ldr	r2, [pc, #204]	; (80013ac <HAL_GPIO_Init+0x2b8>)
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	58d3      	ldr	r3, [r2, r3]
 80012e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	43da      	mvns	r2, r3
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	2380      	movs	r3, #128	; 0x80
 80012f6:	025b      	lsls	r3, r3, #9
 80012f8:	4013      	ands	r3, r2
 80012fa:	d003      	beq.n	8001304 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	4313      	orrs	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001304:	4929      	ldr	r1, [pc, #164]	; (80013ac <HAL_GPIO_Init+0x2b8>)
 8001306:	2280      	movs	r2, #128	; 0x80
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 800130c:	4a27      	ldr	r2, [pc, #156]	; (80013ac <HAL_GPIO_Init+0x2b8>)
 800130e:	2384      	movs	r3, #132	; 0x84
 8001310:	58d3      	ldr	r3, [r2, r3]
 8001312:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	43da      	mvns	r2, r3
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	2380      	movs	r3, #128	; 0x80
 8001324:	029b      	lsls	r3, r3, #10
 8001326:	4013      	ands	r3, r2
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	4313      	orrs	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001332:	491e      	ldr	r1, [pc, #120]	; (80013ac <HAL_GPIO_Init+0x2b8>)
 8001334:	2284      	movs	r2, #132	; 0x84
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800133a:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <HAL_GPIO_Init+0x2b8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	43da      	mvns	r2, r3
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	4013      	ands	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	2380      	movs	r3, #128	; 0x80
 8001350:	035b      	lsls	r3, r3, #13
 8001352:	4013      	ands	r3, r2
 8001354:	d003      	beq.n	800135e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <HAL_GPIO_Init+0x2b8>)
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <HAL_GPIO_Init+0x2b8>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	43da      	mvns	r2, r3
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	039b      	lsls	r3, r3, #14
 800137c:	4013      	ands	r3, r2
 800137e:	d003      	beq.n	8001388 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	4313      	orrs	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <HAL_GPIO_Init+0x2b8>)
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	3301      	adds	r3, #1
 8001392:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	40da      	lsrs	r2, r3
 800139c:	1e13      	subs	r3, r2, #0
 800139e:	d000      	beq.n	80013a2 <HAL_GPIO_Init+0x2ae>
 80013a0:	e6b0      	b.n	8001104 <HAL_GPIO_Init+0x10>
  }
}
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	46c0      	nop			; (mov r8, r8)
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b006      	add	sp, #24
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40021800 	.word	0x40021800
 80013b0:	50000400 	.word	0x50000400
 80013b4:	50000800 	.word	0x50000800
 80013b8:	50000c00 	.word	0x50000c00

080013bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	000a      	movs	r2, r1
 80013c6:	1cbb      	adds	r3, r7, #2
 80013c8:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	1cba      	adds	r2, r7, #2
 80013d0:	8812      	ldrh	r2, [r2, #0]
 80013d2:	4013      	ands	r3, r2
 80013d4:	d004      	beq.n	80013e0 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 80013d6:	230f      	movs	r3, #15
 80013d8:	18fb      	adds	r3, r7, r3
 80013da:	2201      	movs	r2, #1
 80013dc:	701a      	strb	r2, [r3, #0]
 80013de:	e003      	b.n	80013e8 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013e0:	230f      	movs	r3, #15
 80013e2:	18fb      	adds	r3, r7, r3
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 80013e8:	230f      	movs	r3, #15
 80013ea:	18fb      	adds	r3, r7, r3
 80013ec:	781b      	ldrb	r3, [r3, #0]
}
 80013ee:	0018      	movs	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b004      	add	sp, #16
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b082      	sub	sp, #8
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	6078      	str	r0, [r7, #4]
 80013fe:	0008      	movs	r0, r1
 8001400:	0011      	movs	r1, r2
 8001402:	1cbb      	adds	r3, r7, #2
 8001404:	1c02      	adds	r2, r0, #0
 8001406:	801a      	strh	r2, [r3, #0]
 8001408:	1c7b      	adds	r3, r7, #1
 800140a:	1c0a      	adds	r2, r1, #0
 800140c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800140e:	1c7b      	adds	r3, r7, #1
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d004      	beq.n	8001420 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001416:	1cbb      	adds	r3, r7, #2
 8001418:	881a      	ldrh	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800141e:	e003      	b.n	8001428 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001420:	1cbb      	adds	r3, r7, #2
 8001422:	881a      	ldrh	r2, [r3, #0]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001428:	46c0      	nop			; (mov r8, r8)
 800142a:	46bd      	mov	sp, r7
 800142c:	b002      	add	sp, #8
 800142e:	bd80      	pop	{r7, pc}

08001430 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001438:	4b19      	ldr	r3, [pc, #100]	; (80014a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a19      	ldr	r2, [pc, #100]	; (80014a4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800143e:	4013      	ands	r3, r2
 8001440:	0019      	movs	r1, r3
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	430a      	orrs	r2, r1
 8001448:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	2380      	movs	r3, #128	; 0x80
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	429a      	cmp	r2, r3
 8001452:	d11f      	bne.n	8001494 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001454:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	0013      	movs	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	189b      	adds	r3, r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4912      	ldr	r1, [pc, #72]	; (80014ac <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001462:	0018      	movs	r0, r3
 8001464:	f7fe fe4c 	bl	8000100 <__udivsi3>
 8001468:	0003      	movs	r3, r0
 800146a:	3301      	adds	r3, #1
 800146c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800146e:	e008      	b.n	8001482 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	3b01      	subs	r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	e001      	b.n	8001482 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e009      	b.n	8001496 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001482:	4b07      	ldr	r3, [pc, #28]	; (80014a0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001484:	695a      	ldr	r2, [r3, #20]
 8001486:	2380      	movs	r3, #128	; 0x80
 8001488:	00db      	lsls	r3, r3, #3
 800148a:	401a      	ands	r2, r3
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	429a      	cmp	r2, r3
 8001492:	d0ed      	beq.n	8001470 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	0018      	movs	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	b004      	add	sp, #16
 800149c:	bd80      	pop	{r7, pc}
 800149e:	46c0      	nop			; (mov r8, r8)
 80014a0:	40007000 	.word	0x40007000
 80014a4:	fffff9ff 	.word	0xfffff9ff
 80014a8:	20000000 	.word	0x20000000
 80014ac:	000f4240 	.word	0x000f4240

080014b0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80014b4:	4b03      	ldr	r3, [pc, #12]	; (80014c4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80014b6:	689a      	ldr	r2, [r3, #8]
 80014b8:	23e0      	movs	r3, #224	; 0xe0
 80014ba:	01db      	lsls	r3, r3, #7
 80014bc:	4013      	ands	r3, r2
}
 80014be:	0018      	movs	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40021000 	.word	0x40021000

080014c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e304      	b.n	8001ae4 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	2201      	movs	r2, #1
 80014e0:	4013      	ands	r3, r2
 80014e2:	d100      	bne.n	80014e6 <HAL_RCC_OscConfig+0x1e>
 80014e4:	e07c      	b.n	80015e0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014e6:	4bc3      	ldr	r3, [pc, #780]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2238      	movs	r2, #56	; 0x38
 80014ec:	4013      	ands	r3, r2
 80014ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014f0:	4bc0      	ldr	r3, [pc, #768]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 80014f2:	68db      	ldr	r3, [r3, #12]
 80014f4:	2203      	movs	r2, #3
 80014f6:	4013      	ands	r3, r2
 80014f8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	2b10      	cmp	r3, #16
 80014fe:	d102      	bne.n	8001506 <HAL_RCC_OscConfig+0x3e>
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	2b03      	cmp	r3, #3
 8001504:	d002      	beq.n	800150c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001506:	69bb      	ldr	r3, [r7, #24]
 8001508:	2b08      	cmp	r3, #8
 800150a:	d10b      	bne.n	8001524 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150c:	4bb9      	ldr	r3, [pc, #740]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	029b      	lsls	r3, r3, #10
 8001514:	4013      	ands	r3, r2
 8001516:	d062      	beq.n	80015de <HAL_RCC_OscConfig+0x116>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d15e      	bne.n	80015de <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e2df      	b.n	8001ae4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685a      	ldr	r2, [r3, #4]
 8001528:	2380      	movs	r3, #128	; 0x80
 800152a:	025b      	lsls	r3, r3, #9
 800152c:	429a      	cmp	r2, r3
 800152e:	d107      	bne.n	8001540 <HAL_RCC_OscConfig+0x78>
 8001530:	4bb0      	ldr	r3, [pc, #704]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4baf      	ldr	r3, [pc, #700]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 8001536:	2180      	movs	r1, #128	; 0x80
 8001538:	0249      	lsls	r1, r1, #9
 800153a:	430a      	orrs	r2, r1
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	e020      	b.n	8001582 <HAL_RCC_OscConfig+0xba>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	23a0      	movs	r3, #160	; 0xa0
 8001546:	02db      	lsls	r3, r3, #11
 8001548:	429a      	cmp	r2, r3
 800154a:	d10e      	bne.n	800156a <HAL_RCC_OscConfig+0xa2>
 800154c:	4ba9      	ldr	r3, [pc, #676]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4ba8      	ldr	r3, [pc, #672]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 8001552:	2180      	movs	r1, #128	; 0x80
 8001554:	02c9      	lsls	r1, r1, #11
 8001556:	430a      	orrs	r2, r1
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	4ba6      	ldr	r3, [pc, #664]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	4ba5      	ldr	r3, [pc, #660]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 8001560:	2180      	movs	r1, #128	; 0x80
 8001562:	0249      	lsls	r1, r1, #9
 8001564:	430a      	orrs	r2, r1
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	e00b      	b.n	8001582 <HAL_RCC_OscConfig+0xba>
 800156a:	4ba2      	ldr	r3, [pc, #648]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	4ba1      	ldr	r3, [pc, #644]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 8001570:	49a1      	ldr	r1, [pc, #644]	; (80017f8 <HAL_RCC_OscConfig+0x330>)
 8001572:	400a      	ands	r2, r1
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	4b9f      	ldr	r3, [pc, #636]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	4b9e      	ldr	r3, [pc, #632]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 800157c:	499f      	ldr	r1, [pc, #636]	; (80017fc <HAL_RCC_OscConfig+0x334>)
 800157e:	400a      	ands	r2, r1
 8001580:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d014      	beq.n	80015b4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158a:	f7ff fcd1 	bl	8000f30 <HAL_GetTick>
 800158e:	0003      	movs	r3, r0
 8001590:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001594:	f7ff fccc 	bl	8000f30 <HAL_GetTick>
 8001598:	0002      	movs	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	; 0x64
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e29e      	b.n	8001ae4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015a6:	4b93      	ldr	r3, [pc, #588]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	2380      	movs	r3, #128	; 0x80
 80015ac:	029b      	lsls	r3, r3, #10
 80015ae:	4013      	ands	r3, r2
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0xcc>
 80015b2:	e015      	b.n	80015e0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b4:	f7ff fcbc 	bl	8000f30 <HAL_GetTick>
 80015b8:	0003      	movs	r3, r0
 80015ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015be:	f7ff fcb7 	bl	8000f30 <HAL_GetTick>
 80015c2:	0002      	movs	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b64      	cmp	r3, #100	; 0x64
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e289      	b.n	8001ae4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015d0:	4b88      	ldr	r3, [pc, #544]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	2380      	movs	r3, #128	; 0x80
 80015d6:	029b      	lsls	r3, r3, #10
 80015d8:	4013      	ands	r3, r2
 80015da:	d1f0      	bne.n	80015be <HAL_RCC_OscConfig+0xf6>
 80015dc:	e000      	b.n	80015e0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015de:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2202      	movs	r2, #2
 80015e6:	4013      	ands	r3, r2
 80015e8:	d100      	bne.n	80015ec <HAL_RCC_OscConfig+0x124>
 80015ea:	e099      	b.n	8001720 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ec:	4b81      	ldr	r3, [pc, #516]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2238      	movs	r2, #56	; 0x38
 80015f2:	4013      	ands	r3, r2
 80015f4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015f6:	4b7f      	ldr	r3, [pc, #508]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	2203      	movs	r2, #3
 80015fc:	4013      	ands	r3, r2
 80015fe:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	2b10      	cmp	r3, #16
 8001604:	d102      	bne.n	800160c <HAL_RCC_OscConfig+0x144>
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d002      	beq.n	8001612 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d135      	bne.n	800167e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001612:	4b78      	ldr	r3, [pc, #480]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	2380      	movs	r3, #128	; 0x80
 8001618:	00db      	lsls	r3, r3, #3
 800161a:	4013      	ands	r3, r2
 800161c:	d005      	beq.n	800162a <HAL_RCC_OscConfig+0x162>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e25c      	b.n	8001ae4 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800162a:	4b72      	ldr	r3, [pc, #456]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	4a74      	ldr	r2, [pc, #464]	; (8001800 <HAL_RCC_OscConfig+0x338>)
 8001630:	4013      	ands	r3, r2
 8001632:	0019      	movs	r1, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	021a      	lsls	r2, r3, #8
 800163a:	4b6e      	ldr	r3, [pc, #440]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 800163c:	430a      	orrs	r2, r1
 800163e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001640:	69bb      	ldr	r3, [r7, #24]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d112      	bne.n	800166c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001646:	4b6b      	ldr	r3, [pc, #428]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a6e      	ldr	r2, [pc, #440]	; (8001804 <HAL_RCC_OscConfig+0x33c>)
 800164c:	4013      	ands	r3, r2
 800164e:	0019      	movs	r1, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691a      	ldr	r2, [r3, #16]
 8001654:	4b67      	ldr	r3, [pc, #412]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 8001656:	430a      	orrs	r2, r1
 8001658:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800165a:	4b66      	ldr	r3, [pc, #408]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	0adb      	lsrs	r3, r3, #11
 8001660:	2207      	movs	r2, #7
 8001662:	4013      	ands	r3, r2
 8001664:	4a68      	ldr	r2, [pc, #416]	; (8001808 <HAL_RCC_OscConfig+0x340>)
 8001666:	40da      	lsrs	r2, r3
 8001668:	4b68      	ldr	r3, [pc, #416]	; (800180c <HAL_RCC_OscConfig+0x344>)
 800166a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800166c:	4b68      	ldr	r3, [pc, #416]	; (8001810 <HAL_RCC_OscConfig+0x348>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	0018      	movs	r0, r3
 8001672:	f7ff fc01 	bl	8000e78 <HAL_InitTick>
 8001676:	1e03      	subs	r3, r0, #0
 8001678:	d051      	beq.n	800171e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e232      	b.n	8001ae4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d030      	beq.n	80016e8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001686:	4b5b      	ldr	r3, [pc, #364]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a5e      	ldr	r2, [pc, #376]	; (8001804 <HAL_RCC_OscConfig+0x33c>)
 800168c:	4013      	ands	r3, r2
 800168e:	0019      	movs	r1, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691a      	ldr	r2, [r3, #16]
 8001694:	4b57      	ldr	r3, [pc, #348]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 8001696:	430a      	orrs	r2, r1
 8001698:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800169a:	4b56      	ldr	r3, [pc, #344]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	4b55      	ldr	r3, [pc, #340]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 80016a0:	2180      	movs	r1, #128	; 0x80
 80016a2:	0049      	lsls	r1, r1, #1
 80016a4:	430a      	orrs	r2, r1
 80016a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a8:	f7ff fc42 	bl	8000f30 <HAL_GetTick>
 80016ac:	0003      	movs	r3, r0
 80016ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016b2:	f7ff fc3d 	bl	8000f30 <HAL_GetTick>
 80016b6:	0002      	movs	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e20f      	b.n	8001ae4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016c4:	4b4b      	ldr	r3, [pc, #300]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	4013      	ands	r3, r2
 80016ce:	d0f0      	beq.n	80016b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d0:	4b48      	ldr	r3, [pc, #288]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	4a4a      	ldr	r2, [pc, #296]	; (8001800 <HAL_RCC_OscConfig+0x338>)
 80016d6:	4013      	ands	r3, r2
 80016d8:	0019      	movs	r1, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	021a      	lsls	r2, r3, #8
 80016e0:	4b44      	ldr	r3, [pc, #272]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 80016e2:	430a      	orrs	r2, r1
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	e01b      	b.n	8001720 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80016e8:	4b42      	ldr	r3, [pc, #264]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b41      	ldr	r3, [pc, #260]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 80016ee:	4949      	ldr	r1, [pc, #292]	; (8001814 <HAL_RCC_OscConfig+0x34c>)
 80016f0:	400a      	ands	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f4:	f7ff fc1c 	bl	8000f30 <HAL_GetTick>
 80016f8:	0003      	movs	r3, r0
 80016fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016fe:	f7ff fc17 	bl	8000f30 <HAL_GetTick>
 8001702:	0002      	movs	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e1e9      	b.n	8001ae4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001710:	4b38      	ldr	r3, [pc, #224]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	2380      	movs	r3, #128	; 0x80
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	4013      	ands	r3, r2
 800171a:	d1f0      	bne.n	80016fe <HAL_RCC_OscConfig+0x236>
 800171c:	e000      	b.n	8001720 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800171e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2208      	movs	r2, #8
 8001726:	4013      	ands	r3, r2
 8001728:	d047      	beq.n	80017ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800172a:	4b32      	ldr	r3, [pc, #200]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2238      	movs	r2, #56	; 0x38
 8001730:	4013      	ands	r3, r2
 8001732:	2b18      	cmp	r3, #24
 8001734:	d10a      	bne.n	800174c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001736:	4b2f      	ldr	r3, [pc, #188]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 8001738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800173a:	2202      	movs	r2, #2
 800173c:	4013      	ands	r3, r2
 800173e:	d03c      	beq.n	80017ba <HAL_RCC_OscConfig+0x2f2>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	699b      	ldr	r3, [r3, #24]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d138      	bne.n	80017ba <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e1cb      	b.n	8001ae4 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d019      	beq.n	8001788 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001754:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 8001756:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001758:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 800175a:	2101      	movs	r1, #1
 800175c:	430a      	orrs	r2, r1
 800175e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001760:	f7ff fbe6 	bl	8000f30 <HAL_GetTick>
 8001764:	0003      	movs	r3, r0
 8001766:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800176a:	f7ff fbe1 	bl	8000f30 <HAL_GetTick>
 800176e:	0002      	movs	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e1b3      	b.n	8001ae4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800177c:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 800177e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001780:	2202      	movs	r2, #2
 8001782:	4013      	ands	r3, r2
 8001784:	d0f1      	beq.n	800176a <HAL_RCC_OscConfig+0x2a2>
 8001786:	e018      	b.n	80017ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001788:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 800178a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 800178e:	2101      	movs	r1, #1
 8001790:	438a      	bics	r2, r1
 8001792:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001794:	f7ff fbcc 	bl	8000f30 <HAL_GetTick>
 8001798:	0003      	movs	r3, r0
 800179a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800179c:	e008      	b.n	80017b0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800179e:	f7ff fbc7 	bl	8000f30 <HAL_GetTick>
 80017a2:	0002      	movs	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d901      	bls.n	80017b0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e199      	b.n	8001ae4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017b0:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 80017b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b4:	2202      	movs	r2, #2
 80017b6:	4013      	ands	r3, r2
 80017b8:	d1f1      	bne.n	800179e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2204      	movs	r2, #4
 80017c0:	4013      	ands	r3, r2
 80017c2:	d100      	bne.n	80017c6 <HAL_RCC_OscConfig+0x2fe>
 80017c4:	e0c6      	b.n	8001954 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017c6:	231f      	movs	r3, #31
 80017c8:	18fb      	adds	r3, r7, r3
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	2238      	movs	r2, #56	; 0x38
 80017d4:	4013      	ands	r3, r2
 80017d6:	2b20      	cmp	r3, #32
 80017d8:	d11e      	bne.n	8001818 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <HAL_RCC_OscConfig+0x32c>)
 80017dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017de:	2202      	movs	r2, #2
 80017e0:	4013      	ands	r3, r2
 80017e2:	d100      	bne.n	80017e6 <HAL_RCC_OscConfig+0x31e>
 80017e4:	e0b6      	b.n	8001954 <HAL_RCC_OscConfig+0x48c>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d000      	beq.n	80017f0 <HAL_RCC_OscConfig+0x328>
 80017ee:	e0b1      	b.n	8001954 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e177      	b.n	8001ae4 <HAL_RCC_OscConfig+0x61c>
 80017f4:	40021000 	.word	0x40021000
 80017f8:	fffeffff 	.word	0xfffeffff
 80017fc:	fffbffff 	.word	0xfffbffff
 8001800:	ffff80ff 	.word	0xffff80ff
 8001804:	ffffc7ff 	.word	0xffffc7ff
 8001808:	00f42400 	.word	0x00f42400
 800180c:	20000000 	.word	0x20000000
 8001810:	20000004 	.word	0x20000004
 8001814:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001818:	4bb4      	ldr	r3, [pc, #720]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 800181a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	055b      	lsls	r3, r3, #21
 8001820:	4013      	ands	r3, r2
 8001822:	d101      	bne.n	8001828 <HAL_RCC_OscConfig+0x360>
 8001824:	2301      	movs	r3, #1
 8001826:	e000      	b.n	800182a <HAL_RCC_OscConfig+0x362>
 8001828:	2300      	movs	r3, #0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d011      	beq.n	8001852 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800182e:	4baf      	ldr	r3, [pc, #700]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 8001830:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001832:	4bae      	ldr	r3, [pc, #696]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 8001834:	2180      	movs	r1, #128	; 0x80
 8001836:	0549      	lsls	r1, r1, #21
 8001838:	430a      	orrs	r2, r1
 800183a:	63da      	str	r2, [r3, #60]	; 0x3c
 800183c:	4bab      	ldr	r3, [pc, #684]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 800183e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	055b      	lsls	r3, r3, #21
 8001844:	4013      	ands	r3, r2
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800184a:	231f      	movs	r3, #31
 800184c:	18fb      	adds	r3, r7, r3
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001852:	4ba7      	ldr	r3, [pc, #668]	; (8001af0 <HAL_RCC_OscConfig+0x628>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	2380      	movs	r3, #128	; 0x80
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	4013      	ands	r3, r2
 800185c:	d11a      	bne.n	8001894 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800185e:	4ba4      	ldr	r3, [pc, #656]	; (8001af0 <HAL_RCC_OscConfig+0x628>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	4ba3      	ldr	r3, [pc, #652]	; (8001af0 <HAL_RCC_OscConfig+0x628>)
 8001864:	2180      	movs	r1, #128	; 0x80
 8001866:	0049      	lsls	r1, r1, #1
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800186c:	f7ff fb60 	bl	8000f30 <HAL_GetTick>
 8001870:	0003      	movs	r3, r0
 8001872:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001874:	e008      	b.n	8001888 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001876:	f7ff fb5b 	bl	8000f30 <HAL_GetTick>
 800187a:	0002      	movs	r2, r0
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e12d      	b.n	8001ae4 <HAL_RCC_OscConfig+0x61c>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001888:	4b99      	ldr	r3, [pc, #612]	; (8001af0 <HAL_RCC_OscConfig+0x628>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	2380      	movs	r3, #128	; 0x80
 800188e:	005b      	lsls	r3, r3, #1
 8001890:	4013      	ands	r3, r2
 8001892:	d0f0      	beq.n	8001876 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d106      	bne.n	80018aa <HAL_RCC_OscConfig+0x3e2>
 800189c:	4b93      	ldr	r3, [pc, #588]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 800189e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018a0:	4b92      	ldr	r3, [pc, #584]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 80018a2:	2101      	movs	r1, #1
 80018a4:	430a      	orrs	r2, r1
 80018a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80018a8:	e01c      	b.n	80018e4 <HAL_RCC_OscConfig+0x41c>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b05      	cmp	r3, #5
 80018b0:	d10c      	bne.n	80018cc <HAL_RCC_OscConfig+0x404>
 80018b2:	4b8e      	ldr	r3, [pc, #568]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 80018b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018b6:	4b8d      	ldr	r3, [pc, #564]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 80018b8:	2104      	movs	r1, #4
 80018ba:	430a      	orrs	r2, r1
 80018bc:	65da      	str	r2, [r3, #92]	; 0x5c
 80018be:	4b8b      	ldr	r3, [pc, #556]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 80018c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018c2:	4b8a      	ldr	r3, [pc, #552]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 80018c4:	2101      	movs	r1, #1
 80018c6:	430a      	orrs	r2, r1
 80018c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80018ca:	e00b      	b.n	80018e4 <HAL_RCC_OscConfig+0x41c>
 80018cc:	4b87      	ldr	r3, [pc, #540]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 80018ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018d0:	4b86      	ldr	r3, [pc, #536]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 80018d2:	2101      	movs	r1, #1
 80018d4:	438a      	bics	r2, r1
 80018d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80018d8:	4b84      	ldr	r3, [pc, #528]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 80018da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018dc:	4b83      	ldr	r3, [pc, #524]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 80018de:	2104      	movs	r1, #4
 80018e0:	438a      	bics	r2, r1
 80018e2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d014      	beq.n	8001916 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7ff fb20 	bl	8000f30 <HAL_GetTick>
 80018f0:	0003      	movs	r3, r0
 80018f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018f4:	e009      	b.n	800190a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f6:	f7ff fb1b 	bl	8000f30 <HAL_GetTick>
 80018fa:	0002      	movs	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	4a7c      	ldr	r2, [pc, #496]	; (8001af4 <HAL_RCC_OscConfig+0x62c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e0ec      	b.n	8001ae4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800190a:	4b78      	ldr	r3, [pc, #480]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 800190c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190e:	2202      	movs	r2, #2
 8001910:	4013      	ands	r3, r2
 8001912:	d0f0      	beq.n	80018f6 <HAL_RCC_OscConfig+0x42e>
 8001914:	e013      	b.n	800193e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001916:	f7ff fb0b 	bl	8000f30 <HAL_GetTick>
 800191a:	0003      	movs	r3, r0
 800191c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800191e:	e009      	b.n	8001934 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001920:	f7ff fb06 	bl	8000f30 <HAL_GetTick>
 8001924:	0002      	movs	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	4a72      	ldr	r2, [pc, #456]	; (8001af4 <HAL_RCC_OscConfig+0x62c>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e0d7      	b.n	8001ae4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001934:	4b6d      	ldr	r3, [pc, #436]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 8001936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001938:	2202      	movs	r2, #2
 800193a:	4013      	ands	r3, r2
 800193c:	d1f0      	bne.n	8001920 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800193e:	231f      	movs	r3, #31
 8001940:	18fb      	adds	r3, r7, r3
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d105      	bne.n	8001954 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001948:	4b68      	ldr	r3, [pc, #416]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 800194a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800194c:	4b67      	ldr	r3, [pc, #412]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 800194e:	496a      	ldr	r1, [pc, #424]	; (8001af8 <HAL_RCC_OscConfig+0x630>)
 8001950:	400a      	ands	r2, r1
 8001952:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d100      	bne.n	800195e <HAL_RCC_OscConfig+0x496>
 800195c:	e0c1      	b.n	8001ae2 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800195e:	4b63      	ldr	r3, [pc, #396]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2238      	movs	r2, #56	; 0x38
 8001964:	4013      	ands	r3, r2
 8001966:	2b10      	cmp	r3, #16
 8001968:	d100      	bne.n	800196c <HAL_RCC_OscConfig+0x4a4>
 800196a:	e081      	b.n	8001a70 <HAL_RCC_OscConfig+0x5a8>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	69db      	ldr	r3, [r3, #28]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d156      	bne.n	8001a22 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001974:	4b5d      	ldr	r3, [pc, #372]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	4b5c      	ldr	r3, [pc, #368]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 800197a:	4960      	ldr	r1, [pc, #384]	; (8001afc <HAL_RCC_OscConfig+0x634>)
 800197c:	400a      	ands	r2, r1
 800197e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001980:	f7ff fad6 	bl	8000f30 <HAL_GetTick>
 8001984:	0003      	movs	r3, r0
 8001986:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001988:	e008      	b.n	800199c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800198a:	f7ff fad1 	bl	8000f30 <HAL_GetTick>
 800198e:	0002      	movs	r2, r0
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d901      	bls.n	800199c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e0a3      	b.n	8001ae4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800199c:	4b53      	ldr	r3, [pc, #332]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	2380      	movs	r3, #128	; 0x80
 80019a2:	049b      	lsls	r3, r3, #18
 80019a4:	4013      	ands	r3, r2
 80019a6:	d1f0      	bne.n	800198a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019a8:	4b50      	ldr	r3, [pc, #320]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	4a54      	ldr	r2, [pc, #336]	; (8001b00 <HAL_RCC_OscConfig+0x638>)
 80019ae:	4013      	ands	r3, r2
 80019b0:	0019      	movs	r1, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a1a      	ldr	r2, [r3, #32]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c0:	021b      	lsls	r3, r3, #8
 80019c2:	431a      	orrs	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c8:	431a      	orrs	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	431a      	orrs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d4:	431a      	orrs	r2, r3
 80019d6:	4b45      	ldr	r3, [pc, #276]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 80019d8:	430a      	orrs	r2, r1
 80019da:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019dc:	4b43      	ldr	r3, [pc, #268]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	4b42      	ldr	r3, [pc, #264]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 80019e2:	2180      	movs	r1, #128	; 0x80
 80019e4:	0449      	lsls	r1, r1, #17
 80019e6:	430a      	orrs	r2, r1
 80019e8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80019ea:	4b40      	ldr	r3, [pc, #256]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	4b3f      	ldr	r3, [pc, #252]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 80019f0:	2180      	movs	r1, #128	; 0x80
 80019f2:	0549      	lsls	r1, r1, #21
 80019f4:	430a      	orrs	r2, r1
 80019f6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f8:	f7ff fa9a 	bl	8000f30 <HAL_GetTick>
 80019fc:	0003      	movs	r3, r0
 80019fe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a02:	f7ff fa95 	bl	8000f30 <HAL_GetTick>
 8001a06:	0002      	movs	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e067      	b.n	8001ae4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a14:	4b35      	ldr	r3, [pc, #212]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	049b      	lsls	r3, r3, #18
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x53a>
 8001a20:	e05f      	b.n	8001ae2 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a22:	4b32      	ldr	r3, [pc, #200]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	4b31      	ldr	r3, [pc, #196]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 8001a28:	4934      	ldr	r1, [pc, #208]	; (8001afc <HAL_RCC_OscConfig+0x634>)
 8001a2a:	400a      	ands	r2, r1
 8001a2c:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001a2e:	4b2f      	ldr	r3, [pc, #188]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	4b2e      	ldr	r3, [pc, #184]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 8001a34:	2103      	movs	r1, #3
 8001a36:	438a      	bics	r2, r1
 8001a38:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8001a3a:	4b2c      	ldr	r3, [pc, #176]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	4b2b      	ldr	r3, [pc, #172]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 8001a40:	4930      	ldr	r1, [pc, #192]	; (8001b04 <HAL_RCC_OscConfig+0x63c>)
 8001a42:	400a      	ands	r2, r1
 8001a44:	60da      	str	r2, [r3, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a46:	f7ff fa73 	bl	8000f30 <HAL_GetTick>
 8001a4a:	0003      	movs	r3, r0
 8001a4c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a50:	f7ff fa6e 	bl	8000f30 <HAL_GetTick>
 8001a54:	0002      	movs	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e040      	b.n	8001ae4 <HAL_RCC_OscConfig+0x61c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a62:	4b22      	ldr	r3, [pc, #136]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	2380      	movs	r3, #128	; 0x80
 8001a68:	049b      	lsls	r3, r3, #18
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0x588>
 8001a6e:	e038      	b.n	8001ae2 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <HAL_RCC_OscConfig+0x5b4>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e033      	b.n	8001ae4 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001a7c:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <HAL_RCC_OscConfig+0x624>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	2203      	movs	r2, #3
 8001a86:	401a      	ands	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a1b      	ldr	r3, [r3, #32]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d126      	bne.n	8001ade <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	2270      	movs	r2, #112	; 0x70
 8001a94:	401a      	ands	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d11f      	bne.n	8001ade <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	23fe      	movs	r3, #254	; 0xfe
 8001aa2:	01db      	lsls	r3, r3, #7
 8001aa4:	401a      	ands	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aaa:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d116      	bne.n	8001ade <HAL_RCC_OscConfig+0x616>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	23f8      	movs	r3, #248	; 0xf8
 8001ab4:	039b      	lsls	r3, r3, #14
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d10e      	bne.n	8001ade <HAL_RCC_OscConfig+0x616>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	23e0      	movs	r3, #224	; 0xe0
 8001ac4:	051b      	lsls	r3, r3, #20
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d106      	bne.n	8001ade <HAL_RCC_OscConfig+0x616>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	0f5b      	lsrs	r3, r3, #29
 8001ad4:	075a      	lsls	r2, r3, #29
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d001      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e000      	b.n	8001ae4 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }
  return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	b008      	add	sp, #32
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40007000 	.word	0x40007000
 8001af4:	00001388 	.word	0x00001388
 8001af8:	efffffff 	.word	0xefffffff
 8001afc:	feffffff 	.word	0xfeffffff
 8001b00:	11c1808c 	.word	0x11c1808c
 8001b04:	eefeffff 	.word	0xeefeffff

08001b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d101      	bne.n	8001b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e0e9      	b.n	8001cf0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b1c:	4b76      	ldr	r3, [pc, #472]	; (8001cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2207      	movs	r2, #7
 8001b22:	4013      	ands	r3, r2
 8001b24:	683a      	ldr	r2, [r7, #0]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d91e      	bls.n	8001b68 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b2a:	4b73      	ldr	r3, [pc, #460]	; (8001cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2207      	movs	r2, #7
 8001b30:	4393      	bics	r3, r2
 8001b32:	0019      	movs	r1, r3
 8001b34:	4b70      	ldr	r3, [pc, #448]	; (8001cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b3c:	f7ff f9f8 	bl	8000f30 <HAL_GetTick>
 8001b40:	0003      	movs	r3, r0
 8001b42:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b44:	e009      	b.n	8001b5a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b46:	f7ff f9f3 	bl	8000f30 <HAL_GetTick>
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	4a6a      	ldr	r2, [pc, #424]	; (8001cfc <HAL_RCC_ClockConfig+0x1f4>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e0ca      	b.n	8001cf0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b5a:	4b67      	ldr	r3, [pc, #412]	; (8001cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2207      	movs	r2, #7
 8001b60:	4013      	ands	r3, r2
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d1ee      	bne.n	8001b46 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d015      	beq.n	8001b9e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2204      	movs	r2, #4
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d006      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b7c:	4b60      	ldr	r3, [pc, #384]	; (8001d00 <HAL_RCC_ClockConfig+0x1f8>)
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	4b5f      	ldr	r3, [pc, #380]	; (8001d00 <HAL_RCC_ClockConfig+0x1f8>)
 8001b82:	21e0      	movs	r1, #224	; 0xe0
 8001b84:	01c9      	lsls	r1, r1, #7
 8001b86:	430a      	orrs	r2, r1
 8001b88:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b8a:	4b5d      	ldr	r3, [pc, #372]	; (8001d00 <HAL_RCC_ClockConfig+0x1f8>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	4a5d      	ldr	r2, [pc, #372]	; (8001d04 <HAL_RCC_ClockConfig+0x1fc>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	0019      	movs	r1, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	4b59      	ldr	r3, [pc, #356]	; (8001d00 <HAL_RCC_ClockConfig+0x1f8>)
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d057      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d107      	bne.n	8001bc0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bb0:	4b53      	ldr	r3, [pc, #332]	; (8001d00 <HAL_RCC_ClockConfig+0x1f8>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	029b      	lsls	r3, r3, #10
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d12b      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e097      	b.n	8001cf0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d107      	bne.n	8001bd8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc8:	4b4d      	ldr	r3, [pc, #308]	; (8001d00 <HAL_RCC_ClockConfig+0x1f8>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	2380      	movs	r3, #128	; 0x80
 8001bce:	049b      	lsls	r3, r3, #18
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d11f      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e08b      	b.n	8001cf0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d107      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001be0:	4b47      	ldr	r3, [pc, #284]	; (8001d00 <HAL_RCC_ClockConfig+0x1f8>)
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	2380      	movs	r3, #128	; 0x80
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4013      	ands	r3, r2
 8001bea:	d113      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e07f      	b.n	8001cf0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	d106      	bne.n	8001c06 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bf8:	4b41      	ldr	r3, [pc, #260]	; (8001d00 <HAL_RCC_ClockConfig+0x1f8>)
 8001bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d108      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e074      	b.n	8001cf0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c06:	4b3e      	ldr	r3, [pc, #248]	; (8001d00 <HAL_RCC_ClockConfig+0x1f8>)
 8001c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	d101      	bne.n	8001c14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e06d      	b.n	8001cf0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c14:	4b3a      	ldr	r3, [pc, #232]	; (8001d00 <HAL_RCC_ClockConfig+0x1f8>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	2207      	movs	r2, #7
 8001c1a:	4393      	bics	r3, r2
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	4b37      	ldr	r3, [pc, #220]	; (8001d00 <HAL_RCC_ClockConfig+0x1f8>)
 8001c24:	430a      	orrs	r2, r1
 8001c26:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c28:	f7ff f982 	bl	8000f30 <HAL_GetTick>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c30:	e009      	b.n	8001c46 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c32:	f7ff f97d 	bl	8000f30 <HAL_GetTick>
 8001c36:	0002      	movs	r2, r0
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	4a2f      	ldr	r2, [pc, #188]	; (8001cfc <HAL_RCC_ClockConfig+0x1f4>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e054      	b.n	8001cf0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c46:	4b2e      	ldr	r3, [pc, #184]	; (8001d00 <HAL_RCC_ClockConfig+0x1f8>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2238      	movs	r2, #56	; 0x38
 8001c4c:	401a      	ands	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d1ec      	bne.n	8001c32 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c58:	4b27      	ldr	r3, [pc, #156]	; (8001cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2207      	movs	r2, #7
 8001c5e:	4013      	ands	r3, r2
 8001c60:	683a      	ldr	r2, [r7, #0]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d21e      	bcs.n	8001ca4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c66:	4b24      	ldr	r3, [pc, #144]	; (8001cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	2207      	movs	r2, #7
 8001c6c:	4393      	bics	r3, r2
 8001c6e:	0019      	movs	r1, r3
 8001c70:	4b21      	ldr	r3, [pc, #132]	; (8001cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c78:	f7ff f95a 	bl	8000f30 <HAL_GetTick>
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c80:	e009      	b.n	8001c96 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c82:	f7ff f955 	bl	8000f30 <HAL_GetTick>
 8001c86:	0002      	movs	r2, r0
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	4a1b      	ldr	r2, [pc, #108]	; (8001cfc <HAL_RCC_ClockConfig+0x1f4>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e02c      	b.n	8001cf0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c96:	4b18      	ldr	r3, [pc, #96]	; (8001cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2207      	movs	r2, #7
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	683a      	ldr	r2, [r7, #0]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d1ee      	bne.n	8001c82 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2204      	movs	r2, #4
 8001caa:	4013      	ands	r3, r2
 8001cac:	d009      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001cae:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <HAL_RCC_ClockConfig+0x1f8>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	4a15      	ldr	r2, [pc, #84]	; (8001d08 <HAL_RCC_ClockConfig+0x200>)
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	0019      	movs	r1, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68da      	ldr	r2, [r3, #12]
 8001cbc:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <HAL_RCC_ClockConfig+0x1f8>)
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001cc2:	f000 f829 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 8001cc6:	0001      	movs	r1, r0
 8001cc8:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <HAL_RCC_ClockConfig+0x1f8>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	0a1b      	lsrs	r3, r3, #8
 8001cce:	220f      	movs	r2, #15
 8001cd0:	401a      	ands	r2, r3
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <HAL_RCC_ClockConfig+0x204>)
 8001cd4:	0092      	lsls	r2, r2, #2
 8001cd6:	58d3      	ldr	r3, [r2, r3]
 8001cd8:	221f      	movs	r2, #31
 8001cda:	4013      	ands	r3, r2
 8001cdc:	000a      	movs	r2, r1
 8001cde:	40da      	lsrs	r2, r3
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <HAL_RCC_ClockConfig+0x208>)
 8001ce2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <HAL_RCC_ClockConfig+0x20c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	0018      	movs	r0, r3
 8001cea:	f7ff f8c5 	bl	8000e78 <HAL_InitTick>
 8001cee:	0003      	movs	r3, r0
}
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b004      	add	sp, #16
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40022000 	.word	0x40022000
 8001cfc:	00001388 	.word	0x00001388
 8001d00:	40021000 	.word	0x40021000
 8001d04:	fffff0ff 	.word	0xfffff0ff
 8001d08:	ffff8fff 	.word	0xffff8fff
 8001d0c:	08003694 	.word	0x08003694
 8001d10:	20000000 	.word	0x20000000
 8001d14:	20000004 	.word	0x20000004

08001d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d1e:	4b3c      	ldr	r3, [pc, #240]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	2238      	movs	r2, #56	; 0x38
 8001d24:	4013      	ands	r3, r2
 8001d26:	d10f      	bne.n	8001d48 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001d28:	4b39      	ldr	r3, [pc, #228]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	0adb      	lsrs	r3, r3, #11
 8001d2e:	2207      	movs	r2, #7
 8001d30:	4013      	ands	r3, r2
 8001d32:	2201      	movs	r2, #1
 8001d34:	409a      	lsls	r2, r3
 8001d36:	0013      	movs	r3, r2
 8001d38:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001d3a:	6839      	ldr	r1, [r7, #0]
 8001d3c:	4835      	ldr	r0, [pc, #212]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d3e:	f7fe f9df 	bl	8000100 <__udivsi3>
 8001d42:	0003      	movs	r3, r0
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	e05d      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d48:	4b31      	ldr	r3, [pc, #196]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2238      	movs	r2, #56	; 0x38
 8001d4e:	4013      	ands	r3, r2
 8001d50:	2b08      	cmp	r3, #8
 8001d52:	d102      	bne.n	8001d5a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d54:	4b30      	ldr	r3, [pc, #192]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x100>)
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	e054      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d5a:	4b2d      	ldr	r3, [pc, #180]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2238      	movs	r2, #56	; 0x38
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b10      	cmp	r3, #16
 8001d64:	d138      	bne.n	8001dd8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001d66:	4b2a      	ldr	r3, [pc, #168]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d70:	4b27      	ldr	r3, [pc, #156]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	091b      	lsrs	r3, r3, #4
 8001d76:	2207      	movs	r2, #7
 8001d78:	4013      	ands	r3, r2
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2b03      	cmp	r3, #3
 8001d82:	d10d      	bne.n	8001da0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	4824      	ldr	r0, [pc, #144]	; (8001e18 <HAL_RCC_GetSysClockFreq+0x100>)
 8001d88:	f7fe f9ba 	bl	8000100 <__udivsi3>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	0019      	movs	r1, r3
 8001d90:	4b1f      	ldr	r3, [pc, #124]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	0a1b      	lsrs	r3, r3, #8
 8001d96:	227f      	movs	r2, #127	; 0x7f
 8001d98:	4013      	ands	r3, r2
 8001d9a:	434b      	muls	r3, r1
 8001d9c:	617b      	str	r3, [r7, #20]
        break;
 8001d9e:	e00d      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001da0:	68b9      	ldr	r1, [r7, #8]
 8001da2:	481c      	ldr	r0, [pc, #112]	; (8001e14 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001da4:	f7fe f9ac 	bl	8000100 <__udivsi3>
 8001da8:	0003      	movs	r3, r0
 8001daa:	0019      	movs	r1, r3
 8001dac:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	0a1b      	lsrs	r3, r3, #8
 8001db2:	227f      	movs	r2, #127	; 0x7f
 8001db4:	4013      	ands	r3, r2
 8001db6:	434b      	muls	r3, r1
 8001db8:	617b      	str	r3, [r7, #20]
        break;
 8001dba:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001dbc:	4b14      	ldr	r3, [pc, #80]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	0f5b      	lsrs	r3, r3, #29
 8001dc2:	2207      	movs	r2, #7
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	6978      	ldr	r0, [r7, #20]
 8001dce:	f7fe f997 	bl	8000100 <__udivsi3>
 8001dd2:	0003      	movs	r3, r0
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	e015      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001dd8:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2238      	movs	r2, #56	; 0x38
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b20      	cmp	r3, #32
 8001de2:	d103      	bne.n	8001dec <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001de4:	2380      	movs	r3, #128	; 0x80
 8001de6:	021b      	lsls	r3, r3, #8
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	e00b      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001dec:	4b08      	ldr	r3, [pc, #32]	; (8001e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2238      	movs	r2, #56	; 0x38
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b18      	cmp	r3, #24
 8001df6:	d103      	bne.n	8001e00 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001df8:	23fa      	movs	r3, #250	; 0xfa
 8001dfa:	01db      	lsls	r3, r3, #7
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	e001      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001e04:	693b      	ldr	r3, [r7, #16]
}
 8001e06:	0018      	movs	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b006      	add	sp, #24
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	46c0      	nop			; (mov r8, r8)
 8001e10:	40021000 	.word	0x40021000
 8001e14:	00f42400 	.word	0x00f42400
 8001e18:	007a1200 	.word	0x007a1200

08001e1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e20:	4b02      	ldr	r3, [pc, #8]	; (8001e2c <HAL_RCC_GetHCLKFreq+0x10>)
 8001e22:	681b      	ldr	r3, [r3, #0]
}
 8001e24:	0018      	movs	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	20000000 	.word	0x20000000

08001e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e30:	b5b0      	push	{r4, r5, r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001e34:	f7ff fff2 	bl	8001e1c <HAL_RCC_GetHCLKFreq>
 8001e38:	0004      	movs	r4, r0
 8001e3a:	f7ff fb39 	bl	80014b0 <LL_RCC_GetAPB1Prescaler>
 8001e3e:	0003      	movs	r3, r0
 8001e40:	0b1a      	lsrs	r2, r3, #12
 8001e42:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e44:	0092      	lsls	r2, r2, #2
 8001e46:	58d3      	ldr	r3, [r2, r3]
 8001e48:	221f      	movs	r2, #31
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	40dc      	lsrs	r4, r3
 8001e4e:	0023      	movs	r3, r4
}
 8001e50:	0018      	movs	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bdb0      	pop	{r4, r5, r7, pc}
 8001e56:	46c0      	nop			; (mov r8, r8)
 8001e58:	080036d4 	.word	0x080036d4

08001e5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e0a8      	b.n	8001fc0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d109      	bne.n	8001e8a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685a      	ldr	r2, [r3, #4]
 8001e7a:	2382      	movs	r3, #130	; 0x82
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d009      	beq.n	8001e96 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	61da      	str	r2, [r3, #28]
 8001e88:	e005      	b.n	8001e96 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	225d      	movs	r2, #93	; 0x5d
 8001ea0:	5c9b      	ldrb	r3, [r3, r2]
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d107      	bne.n	8001eb8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	225c      	movs	r2, #92	; 0x5c
 8001eac:	2100      	movs	r1, #0
 8001eae:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f7fe fee6 	bl	8000c84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	225d      	movs	r2, #93	; 0x5d
 8001ebc:	2102      	movs	r1, #2
 8001ebe:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2140      	movs	r1, #64	; 0x40
 8001ecc:	438a      	bics	r2, r1
 8001ece:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68da      	ldr	r2, [r3, #12]
 8001ed4:	23e0      	movs	r3, #224	; 0xe0
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d902      	bls.n	8001ee2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	e002      	b.n	8001ee8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	015b      	lsls	r3, r3, #5
 8001ee6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	23f0      	movs	r3, #240	; 0xf0
 8001eee:	011b      	lsls	r3, r3, #4
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d008      	beq.n	8001f06 <HAL_SPI_Init+0xaa>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	23e0      	movs	r3, #224	; 0xe0
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d002      	beq.n	8001f06 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685a      	ldr	r2, [r3, #4]
 8001f0a:	2382      	movs	r3, #130	; 0x82
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	401a      	ands	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6899      	ldr	r1, [r3, #8]
 8001f14:	2384      	movs	r3, #132	; 0x84
 8001f16:	021b      	lsls	r3, r3, #8
 8001f18:	400b      	ands	r3, r1
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	2102      	movs	r1, #2
 8001f22:	400b      	ands	r3, r1
 8001f24:	431a      	orrs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	400b      	ands	r3, r1
 8001f2e:	431a      	orrs	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6999      	ldr	r1, [r3, #24]
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	400b      	ands	r3, r1
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	2138      	movs	r1, #56	; 0x38
 8001f42:	400b      	ands	r3, r1
 8001f44:	431a      	orrs	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	2180      	movs	r1, #128	; 0x80
 8001f4c:	400b      	ands	r3, r1
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	0011      	movs	r1, r2
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f56:	2380      	movs	r3, #128	; 0x80
 8001f58:	019b      	lsls	r3, r3, #6
 8001f5a:	401a      	ands	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	0c1b      	lsrs	r3, r3, #16
 8001f6a:	2204      	movs	r2, #4
 8001f6c:	401a      	ands	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	2110      	movs	r1, #16
 8001f74:	400b      	ands	r3, r1
 8001f76:	431a      	orrs	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f7c:	2108      	movs	r1, #8
 8001f7e:	400b      	ands	r3, r1
 8001f80:	431a      	orrs	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68d9      	ldr	r1, [r3, #12]
 8001f86:	23f0      	movs	r3, #240	; 0xf0
 8001f88:	011b      	lsls	r3, r3, #4
 8001f8a:	400b      	ands	r3, r1
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	0011      	movs	r1, r2
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	2380      	movs	r3, #128	; 0x80
 8001f94:	015b      	lsls	r3, r3, #5
 8001f96:	401a      	ands	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	69da      	ldr	r2, [r3, #28]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4907      	ldr	r1, [pc, #28]	; (8001fc8 <HAL_SPI_Init+0x16c>)
 8001fac:	400a      	ands	r2, r1
 8001fae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	225d      	movs	r2, #93	; 0x5d
 8001fba:	2101      	movs	r1, #1
 8001fbc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
}
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	b004      	add	sp, #16
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	fffff7ff 	.word	0xfffff7ff

08001fcc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	603b      	str	r3, [r7, #0]
 8001fd8:	1dbb      	adds	r3, r7, #6
 8001fda:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001fdc:	231f      	movs	r3, #31
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	225c      	movs	r2, #92	; 0x5c
 8001fe8:	5c9b      	ldrb	r3, [r3, r2]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d101      	bne.n	8001ff2 <HAL_SPI_Transmit+0x26>
 8001fee:	2302      	movs	r3, #2
 8001ff0:	e140      	b.n	8002274 <HAL_SPI_Transmit+0x2a8>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	225c      	movs	r2, #92	; 0x5c
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ffa:	f7fe ff99 	bl	8000f30 <HAL_GetTick>
 8001ffe:	0003      	movs	r3, r0
 8002000:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002002:	2316      	movs	r3, #22
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	1dba      	adds	r2, r7, #6
 8002008:	8812      	ldrh	r2, [r2, #0]
 800200a:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	225d      	movs	r2, #93	; 0x5d
 8002010:	5c9b      	ldrb	r3, [r3, r2]
 8002012:	b2db      	uxtb	r3, r3
 8002014:	2b01      	cmp	r3, #1
 8002016:	d004      	beq.n	8002022 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002018:	231f      	movs	r3, #31
 800201a:	18fb      	adds	r3, r7, r3
 800201c:	2202      	movs	r2, #2
 800201e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002020:	e11d      	b.n	800225e <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_SPI_Transmit+0x64>
 8002028:	1dbb      	adds	r3, r7, #6
 800202a:	881b      	ldrh	r3, [r3, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d104      	bne.n	800203a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002030:	231f      	movs	r3, #31
 8002032:	18fb      	adds	r3, r7, r3
 8002034:	2201      	movs	r2, #1
 8002036:	701a      	strb	r2, [r3, #0]
    goto error;
 8002038:	e111      	b.n	800225e <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	225d      	movs	r2, #93	; 0x5d
 800203e:	2103      	movs	r1, #3
 8002040:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1dba      	adds	r2, r7, #6
 8002052:	8812      	ldrh	r2, [r2, #0]
 8002054:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1dba      	adds	r2, r7, #6
 800205a:	8812      	ldrh	r2, [r2, #0]
 800205c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2244      	movs	r2, #68	; 0x44
 8002068:	2100      	movs	r1, #0
 800206a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2246      	movs	r2, #70	; 0x46
 8002070:	2100      	movs	r1, #0
 8002072:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	2380      	movs	r3, #128	; 0x80
 8002086:	021b      	lsls	r3, r3, #8
 8002088:	429a      	cmp	r2, r3
 800208a:	d110      	bne.n	80020ae <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2140      	movs	r1, #64	; 0x40
 8002098:	438a      	bics	r2, r1
 800209a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2180      	movs	r1, #128	; 0x80
 80020a8:	01c9      	lsls	r1, r1, #7
 80020aa:	430a      	orrs	r2, r1
 80020ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2240      	movs	r2, #64	; 0x40
 80020b6:	4013      	ands	r3, r2
 80020b8:	2b40      	cmp	r3, #64	; 0x40
 80020ba:	d007      	beq.n	80020cc <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2140      	movs	r1, #64	; 0x40
 80020c8:	430a      	orrs	r2, r1
 80020ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	23e0      	movs	r3, #224	; 0xe0
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d94e      	bls.n	8002176 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d004      	beq.n	80020ea <HAL_SPI_Transmit+0x11e>
 80020e0:	2316      	movs	r3, #22
 80020e2:	18fb      	adds	r3, r7, r3
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d13f      	bne.n	800216a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ee:	881a      	ldrh	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020fa:	1c9a      	adds	r2, r3, #2
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002104:	b29b      	uxth	r3, r3
 8002106:	3b01      	subs	r3, #1
 8002108:	b29a      	uxth	r2, r3
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800210e:	e02c      	b.n	800216a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2202      	movs	r2, #2
 8002118:	4013      	ands	r3, r2
 800211a:	2b02      	cmp	r3, #2
 800211c:	d112      	bne.n	8002144 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002122:	881a      	ldrh	r2, [r3, #0]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212e:	1c9a      	adds	r2, r3, #2
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002138:	b29b      	uxth	r3, r3
 800213a:	3b01      	subs	r3, #1
 800213c:	b29a      	uxth	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002142:	e012      	b.n	800216a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002144:	f7fe fef4 	bl	8000f30 <HAL_GetTick>
 8002148:	0002      	movs	r2, r0
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d802      	bhi.n	800215a <HAL_SPI_Transmit+0x18e>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	3301      	adds	r3, #1
 8002158:	d102      	bne.n	8002160 <HAL_SPI_Transmit+0x194>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d104      	bne.n	800216a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8002160:	231f      	movs	r3, #31
 8002162:	18fb      	adds	r3, r7, r3
 8002164:	2203      	movs	r2, #3
 8002166:	701a      	strb	r2, [r3, #0]
          goto error;
 8002168:	e079      	b.n	800225e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800216e:	b29b      	uxth	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1cd      	bne.n	8002110 <HAL_SPI_Transmit+0x144>
 8002174:	e04f      	b.n	8002216 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d004      	beq.n	8002188 <HAL_SPI_Transmit+0x1bc>
 800217e:	2316      	movs	r3, #22
 8002180:	18fb      	adds	r3, r7, r3
 8002182:	881b      	ldrh	r3, [r3, #0]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d141      	bne.n	800220c <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	330c      	adds	r3, #12
 8002192:	7812      	ldrb	r2, [r2, #0]
 8002194:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	3b01      	subs	r3, #1
 80021a8:	b29a      	uxth	r2, r3
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 80021ae:	e02d      	b.n	800220c <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	2202      	movs	r2, #2
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d113      	bne.n	80021e6 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	330c      	adds	r3, #12
 80021c8:	7812      	ldrb	r2, [r2, #0]
 80021ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d0:	1c5a      	adds	r2, r3, #1
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021da:	b29b      	uxth	r3, r3
 80021dc:	3b01      	subs	r3, #1
 80021de:	b29a      	uxth	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80021e4:	e012      	b.n	800220c <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80021e6:	f7fe fea3 	bl	8000f30 <HAL_GetTick>
 80021ea:	0002      	movs	r2, r0
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d802      	bhi.n	80021fc <HAL_SPI_Transmit+0x230>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	3301      	adds	r3, #1
 80021fa:	d102      	bne.n	8002202 <HAL_SPI_Transmit+0x236>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d104      	bne.n	800220c <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8002202:	231f      	movs	r3, #31
 8002204:	18fb      	adds	r3, r7, r3
 8002206:	2203      	movs	r2, #3
 8002208:	701a      	strb	r2, [r3, #0]
          goto error;
 800220a:	e028      	b.n	800225e <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002210:	b29b      	uxth	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1cc      	bne.n	80021b0 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	6839      	ldr	r1, [r7, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	0018      	movs	r0, r3
 800221e:	f000 fcd9 	bl	8002bd4 <SPI_EndRxTxTransaction>
 8002222:	1e03      	subs	r3, r0, #0
 8002224:	d002      	beq.n	800222c <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2220      	movs	r2, #32
 800222a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d10a      	bne.n	800224a <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002234:	2300      	movs	r3, #0
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224e:	2b00      	cmp	r3, #0
 8002250:	d004      	beq.n	800225c <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8002252:	231f      	movs	r3, #31
 8002254:	18fb      	adds	r3, r7, r3
 8002256:	2201      	movs	r2, #1
 8002258:	701a      	strb	r2, [r3, #0]
 800225a:	e000      	b.n	800225e <HAL_SPI_Transmit+0x292>
  }

error:
 800225c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	225d      	movs	r2, #93	; 0x5d
 8002262:	2101      	movs	r1, #1
 8002264:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	225c      	movs	r2, #92	; 0x5c
 800226a:	2100      	movs	r1, #0
 800226c:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800226e:	231f      	movs	r3, #31
 8002270:	18fb      	adds	r3, r7, r3
 8002272:	781b      	ldrb	r3, [r3, #0]
}
 8002274:	0018      	movs	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	b008      	add	sp, #32
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800227c:	b590      	push	{r4, r7, lr}
 800227e:	b089      	sub	sp, #36	; 0x24
 8002280:	af02      	add	r7, sp, #8
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	603b      	str	r3, [r7, #0]
 8002288:	1dbb      	adds	r3, r7, #6
 800228a:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800228c:	2317      	movs	r3, #23
 800228e:	18fb      	adds	r3, r7, r3
 8002290:	2200      	movs	r2, #0
 8002292:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	2382      	movs	r3, #130	; 0x82
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	429a      	cmp	r2, r3
 800229e:	d113      	bne.n	80022c8 <HAL_SPI_Receive+0x4c>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10f      	bne.n	80022c8 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	225d      	movs	r2, #93	; 0x5d
 80022ac:	2104      	movs	r1, #4
 80022ae:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80022b0:	1dbb      	adds	r3, r7, #6
 80022b2:	881c      	ldrh	r4, [r3, #0]
 80022b4:	68ba      	ldr	r2, [r7, #8]
 80022b6:	68b9      	ldr	r1, [r7, #8]
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	0023      	movs	r3, r4
 80022c0:	f000 f928 	bl	8002514 <HAL_SPI_TransmitReceive>
 80022c4:	0003      	movs	r3, r0
 80022c6:	e11c      	b.n	8002502 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	225c      	movs	r2, #92	; 0x5c
 80022cc:	5c9b      	ldrb	r3, [r3, r2]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_SPI_Receive+0x5a>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e115      	b.n	8002502 <HAL_SPI_Receive+0x286>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	225c      	movs	r2, #92	; 0x5c
 80022da:	2101      	movs	r1, #1
 80022dc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80022de:	f7fe fe27 	bl	8000f30 <HAL_GetTick>
 80022e2:	0003      	movs	r3, r0
 80022e4:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	225d      	movs	r2, #93	; 0x5d
 80022ea:	5c9b      	ldrb	r3, [r3, r2]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d004      	beq.n	80022fc <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80022f2:	2317      	movs	r3, #23
 80022f4:	18fb      	adds	r3, r7, r3
 80022f6:	2202      	movs	r2, #2
 80022f8:	701a      	strb	r2, [r3, #0]
    goto error;
 80022fa:	e0f7      	b.n	80024ec <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d003      	beq.n	800230a <HAL_SPI_Receive+0x8e>
 8002302:	1dbb      	adds	r3, r7, #6
 8002304:	881b      	ldrh	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d104      	bne.n	8002314 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800230a:	2317      	movs	r3, #23
 800230c:	18fb      	adds	r3, r7, r3
 800230e:	2201      	movs	r2, #1
 8002310:	701a      	strb	r2, [r3, #0]
    goto error;
 8002312:	e0eb      	b.n	80024ec <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	225d      	movs	r2, #93	; 0x5d
 8002318:	2104      	movs	r1, #4
 800231a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	68ba      	ldr	r2, [r7, #8]
 8002326:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	1dba      	adds	r2, r7, #6
 800232c:	2144      	movs	r1, #68	; 0x44
 800232e:	8812      	ldrh	r2, [r2, #0]
 8002330:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1dba      	adds	r2, r7, #6
 8002336:	2146      	movs	r1, #70	; 0x46
 8002338:	8812      	ldrh	r2, [r2, #0]
 800233a:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2200      	movs	r2, #0
 8002346:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2200      	movs	r2, #0
 8002352:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	68da      	ldr	r2, [r3, #12]
 800235e:	23e0      	movs	r3, #224	; 0xe0
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	429a      	cmp	r2, r3
 8002364:	d908      	bls.n	8002378 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4966      	ldr	r1, [pc, #408]	; (800250c <HAL_SPI_Receive+0x290>)
 8002372:	400a      	ands	r2, r1
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	e008      	b.n	800238a <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2180      	movs	r1, #128	; 0x80
 8002384:	0149      	lsls	r1, r1, #5
 8002386:	430a      	orrs	r2, r1
 8002388:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	2380      	movs	r3, #128	; 0x80
 8002390:	021b      	lsls	r3, r3, #8
 8002392:	429a      	cmp	r2, r3
 8002394:	d10f      	bne.n	80023b6 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2140      	movs	r1, #64	; 0x40
 80023a2:	438a      	bics	r2, r1
 80023a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4957      	ldr	r1, [pc, #348]	; (8002510 <HAL_SPI_Receive+0x294>)
 80023b2:	400a      	ands	r2, r1
 80023b4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2240      	movs	r2, #64	; 0x40
 80023be:	4013      	ands	r3, r2
 80023c0:	2b40      	cmp	r3, #64	; 0x40
 80023c2:	d007      	beq.n	80023d4 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2140      	movs	r1, #64	; 0x40
 80023d0:	430a      	orrs	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	23e0      	movs	r3, #224	; 0xe0
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	429a      	cmp	r2, r3
 80023de:	d900      	bls.n	80023e2 <HAL_SPI_Receive+0x166>
 80023e0:	e069      	b.n	80024b6 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80023e2:	e031      	b.n	8002448 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2201      	movs	r2, #1
 80023ec:	4013      	ands	r3, r2
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d117      	bne.n	8002422 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	330c      	adds	r3, #12
 80023f8:	001a      	movs	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fe:	7812      	ldrb	r2, [r2, #0]
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2246      	movs	r2, #70	; 0x46
 8002412:	5a9b      	ldrh	r3, [r3, r2]
 8002414:	b29b      	uxth	r3, r3
 8002416:	3b01      	subs	r3, #1
 8002418:	b299      	uxth	r1, r3
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2246      	movs	r2, #70	; 0x46
 800241e:	5299      	strh	r1, [r3, r2]
 8002420:	e012      	b.n	8002448 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002422:	f7fe fd85 	bl	8000f30 <HAL_GetTick>
 8002426:	0002      	movs	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	429a      	cmp	r2, r3
 8002430:	d802      	bhi.n	8002438 <HAL_SPI_Receive+0x1bc>
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	3301      	adds	r3, #1
 8002436:	d102      	bne.n	800243e <HAL_SPI_Receive+0x1c2>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d104      	bne.n	8002448 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 800243e:	2317      	movs	r3, #23
 8002440:	18fb      	adds	r3, r7, r3
 8002442:	2203      	movs	r2, #3
 8002444:	701a      	strb	r2, [r3, #0]
          goto error;
 8002446:	e051      	b.n	80024ec <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2246      	movs	r2, #70	; 0x46
 800244c:	5a9b      	ldrh	r3, [r3, r2]
 800244e:	b29b      	uxth	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1c7      	bne.n	80023e4 <HAL_SPI_Receive+0x168>
 8002454:	e035      	b.n	80024c2 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	2201      	movs	r2, #1
 800245e:	4013      	ands	r3, r2
 8002460:	2b01      	cmp	r3, #1
 8002462:	d115      	bne.n	8002490 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68da      	ldr	r2, [r3, #12]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	b292      	uxth	r2, r2
 8002470:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	1c9a      	adds	r2, r3, #2
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2246      	movs	r2, #70	; 0x46
 8002480:	5a9b      	ldrh	r3, [r3, r2]
 8002482:	b29b      	uxth	r3, r3
 8002484:	3b01      	subs	r3, #1
 8002486:	b299      	uxth	r1, r3
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2246      	movs	r2, #70	; 0x46
 800248c:	5299      	strh	r1, [r3, r2]
 800248e:	e012      	b.n	80024b6 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002490:	f7fe fd4e 	bl	8000f30 <HAL_GetTick>
 8002494:	0002      	movs	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d802      	bhi.n	80024a6 <HAL_SPI_Receive+0x22a>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	3301      	adds	r3, #1
 80024a4:	d102      	bne.n	80024ac <HAL_SPI_Receive+0x230>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d104      	bne.n	80024b6 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80024ac:	2317      	movs	r3, #23
 80024ae:	18fb      	adds	r3, r7, r3
 80024b0:	2203      	movs	r2, #3
 80024b2:	701a      	strb	r2, [r3, #0]
          goto error;
 80024b4:	e01a      	b.n	80024ec <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2246      	movs	r2, #70	; 0x46
 80024ba:	5a9b      	ldrh	r3, [r3, r2]
 80024bc:	b29b      	uxth	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d1c9      	bne.n	8002456 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	6839      	ldr	r1, [r7, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	0018      	movs	r0, r3
 80024ca:	f000 fb25 	bl	8002b18 <SPI_EndRxTransaction>
 80024ce:	1e03      	subs	r3, r0, #0
 80024d0:	d002      	beq.n	80024d8 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2220      	movs	r2, #32
 80024d6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d004      	beq.n	80024ea <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 80024e0:	2317      	movs	r3, #23
 80024e2:	18fb      	adds	r3, r7, r3
 80024e4:	2201      	movs	r2, #1
 80024e6:	701a      	strb	r2, [r3, #0]
 80024e8:	e000      	b.n	80024ec <HAL_SPI_Receive+0x270>
  }

error :
 80024ea:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	225d      	movs	r2, #93	; 0x5d
 80024f0:	2101      	movs	r1, #1
 80024f2:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	225c      	movs	r2, #92	; 0x5c
 80024f8:	2100      	movs	r1, #0
 80024fa:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80024fc:	2317      	movs	r3, #23
 80024fe:	18fb      	adds	r3, r7, r3
 8002500:	781b      	ldrb	r3, [r3, #0]
}
 8002502:	0018      	movs	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	b007      	add	sp, #28
 8002508:	bd90      	pop	{r4, r7, pc}
 800250a:	46c0      	nop			; (mov r8, r8)
 800250c:	ffffefff 	.word	0xffffefff
 8002510:	ffffbfff 	.word	0xffffbfff

08002514 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08a      	sub	sp, #40	; 0x28
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
 8002520:	001a      	movs	r2, r3
 8002522:	1cbb      	adds	r3, r7, #2
 8002524:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002526:	2301      	movs	r3, #1
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800252a:	2323      	movs	r3, #35	; 0x23
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	225c      	movs	r2, #92	; 0x5c
 8002536:	5c9b      	ldrb	r3, [r3, r2]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d101      	bne.n	8002540 <HAL_SPI_TransmitReceive+0x2c>
 800253c:	2302      	movs	r3, #2
 800253e:	e1b5      	b.n	80028ac <HAL_SPI_TransmitReceive+0x398>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	225c      	movs	r2, #92	; 0x5c
 8002544:	2101      	movs	r1, #1
 8002546:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002548:	f7fe fcf2 	bl	8000f30 <HAL_GetTick>
 800254c:	0003      	movs	r3, r0
 800254e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002550:	201b      	movs	r0, #27
 8002552:	183b      	adds	r3, r7, r0
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	215d      	movs	r1, #93	; 0x5d
 8002558:	5c52      	ldrb	r2, [r2, r1]
 800255a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002562:	2312      	movs	r3, #18
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	1cba      	adds	r2, r7, #2
 8002568:	8812      	ldrh	r2, [r2, #0]
 800256a:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800256c:	183b      	adds	r3, r7, r0
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d011      	beq.n	8002598 <HAL_SPI_TransmitReceive+0x84>
 8002574:	697a      	ldr	r2, [r7, #20]
 8002576:	2382      	movs	r3, #130	; 0x82
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	429a      	cmp	r2, r3
 800257c:	d107      	bne.n	800258e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d103      	bne.n	800258e <HAL_SPI_TransmitReceive+0x7a>
 8002586:	183b      	adds	r3, r7, r0
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b04      	cmp	r3, #4
 800258c:	d004      	beq.n	8002598 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800258e:	2323      	movs	r3, #35	; 0x23
 8002590:	18fb      	adds	r3, r7, r3
 8002592:	2202      	movs	r2, #2
 8002594:	701a      	strb	r2, [r3, #0]
    goto error;
 8002596:	e17e      	b.n	8002896 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d006      	beq.n	80025ac <HAL_SPI_TransmitReceive+0x98>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d003      	beq.n	80025ac <HAL_SPI_TransmitReceive+0x98>
 80025a4:	1cbb      	adds	r3, r7, #2
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d104      	bne.n	80025b6 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80025ac:	2323      	movs	r3, #35	; 0x23
 80025ae:	18fb      	adds	r3, r7, r3
 80025b0:	2201      	movs	r2, #1
 80025b2:	701a      	strb	r2, [r3, #0]
    goto error;
 80025b4:	e16f      	b.n	8002896 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	225d      	movs	r2, #93	; 0x5d
 80025ba:	5c9b      	ldrb	r3, [r3, r2]
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d003      	beq.n	80025ca <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	225d      	movs	r2, #93	; 0x5d
 80025c6:	2105      	movs	r1, #5
 80025c8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2200      	movs	r2, #0
 80025ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1cba      	adds	r2, r7, #2
 80025da:	2146      	movs	r1, #70	; 0x46
 80025dc:	8812      	ldrh	r2, [r2, #0]
 80025de:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	1cba      	adds	r2, r7, #2
 80025e4:	2144      	movs	r1, #68	; 0x44
 80025e6:	8812      	ldrh	r2, [r2, #0]
 80025e8:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	68ba      	ldr	r2, [r7, #8]
 80025ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	1cba      	adds	r2, r7, #2
 80025f4:	8812      	ldrh	r2, [r2, #0]
 80025f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	1cba      	adds	r2, r7, #2
 80025fc:	8812      	ldrh	r2, [r2, #0]
 80025fe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	68da      	ldr	r2, [r3, #12]
 8002610:	23e0      	movs	r3, #224	; 0xe0
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	429a      	cmp	r2, r3
 8002616:	d908      	bls.n	800262a <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	49a4      	ldr	r1, [pc, #656]	; (80028b4 <HAL_SPI_TransmitReceive+0x3a0>)
 8002624:	400a      	ands	r2, r1
 8002626:	605a      	str	r2, [r3, #4]
 8002628:	e008      	b.n	800263c <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2180      	movs	r1, #128	; 0x80
 8002636:	0149      	lsls	r1, r1, #5
 8002638:	430a      	orrs	r2, r1
 800263a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2240      	movs	r2, #64	; 0x40
 8002644:	4013      	ands	r3, r2
 8002646:	2b40      	cmp	r3, #64	; 0x40
 8002648:	d007      	beq.n	800265a <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2140      	movs	r1, #64	; 0x40
 8002656:	430a      	orrs	r2, r1
 8002658:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	23e0      	movs	r3, #224	; 0xe0
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	429a      	cmp	r2, r3
 8002664:	d800      	bhi.n	8002668 <HAL_SPI_TransmitReceive+0x154>
 8002666:	e07f      	b.n	8002768 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d005      	beq.n	800267c <HAL_SPI_TransmitReceive+0x168>
 8002670:	2312      	movs	r3, #18
 8002672:	18fb      	adds	r3, r7, r3
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d000      	beq.n	800267c <HAL_SPI_TransmitReceive+0x168>
 800267a:	e069      	b.n	8002750 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002680:	881a      	ldrh	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268c:	1c9a      	adds	r2, r3, #2
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002696:	b29b      	uxth	r3, r3
 8002698:	3b01      	subs	r3, #1
 800269a:	b29a      	uxth	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026a0:	e056      	b.n	8002750 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2202      	movs	r2, #2
 80026aa:	4013      	ands	r3, r2
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d11b      	bne.n	80026e8 <HAL_SPI_TransmitReceive+0x1d4>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d016      	beq.n	80026e8 <HAL_SPI_TransmitReceive+0x1d4>
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d113      	bne.n	80026e8 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c4:	881a      	ldrh	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d0:	1c9a      	adds	r2, r3, #2
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026da:	b29b      	uxth	r3, r3
 80026dc:	3b01      	subs	r3, #1
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026e4:	2300      	movs	r3, #0
 80026e6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	2201      	movs	r2, #1
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d11c      	bne.n	8002730 <HAL_SPI_TransmitReceive+0x21c>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2246      	movs	r2, #70	; 0x46
 80026fa:	5a9b      	ldrh	r3, [r3, r2]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d016      	beq.n	8002730 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	b292      	uxth	r2, r2
 800270e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	1c9a      	adds	r2, r3, #2
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2246      	movs	r2, #70	; 0x46
 800271e:	5a9b      	ldrh	r3, [r3, r2]
 8002720:	b29b      	uxth	r3, r3
 8002722:	3b01      	subs	r3, #1
 8002724:	b299      	uxth	r1, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2246      	movs	r2, #70	; 0x46
 800272a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800272c:	2301      	movs	r3, #1
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002730:	f7fe fbfe 	bl	8000f30 <HAL_GetTick>
 8002734:	0002      	movs	r2, r0
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800273c:	429a      	cmp	r2, r3
 800273e:	d807      	bhi.n	8002750 <HAL_SPI_TransmitReceive+0x23c>
 8002740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002742:	3301      	adds	r3, #1
 8002744:	d004      	beq.n	8002750 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8002746:	2323      	movs	r3, #35	; 0x23
 8002748:	18fb      	adds	r3, r7, r3
 800274a:	2203      	movs	r2, #3
 800274c:	701a      	strb	r2, [r3, #0]
        goto error;
 800274e:	e0a2      	b.n	8002896 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002754:	b29b      	uxth	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1a3      	bne.n	80026a2 <HAL_SPI_TransmitReceive+0x18e>
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2246      	movs	r2, #70	; 0x46
 800275e:	5a9b      	ldrh	r3, [r3, r2]
 8002760:	b29b      	uxth	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d19d      	bne.n	80026a2 <HAL_SPI_TransmitReceive+0x18e>
 8002766:	e085      	b.n	8002874 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_SPI_TransmitReceive+0x268>
 8002770:	2312      	movs	r3, #18
 8002772:	18fb      	adds	r3, r7, r3
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d000      	beq.n	800277c <HAL_SPI_TransmitReceive+0x268>
 800277a:	e070      	b.n	800285e <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	330c      	adds	r3, #12
 8002786:	7812      	ldrb	r2, [r2, #0]
 8002788:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002798:	b29b      	uxth	r3, r3
 800279a:	3b01      	subs	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027a2:	e05c      	b.n	800285e <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2202      	movs	r2, #2
 80027ac:	4013      	ands	r3, r2
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d11c      	bne.n	80027ec <HAL_SPI_TransmitReceive+0x2d8>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d017      	beq.n	80027ec <HAL_SPI_TransmitReceive+0x2d8>
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d114      	bne.n	80027ec <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	330c      	adds	r3, #12
 80027cc:	7812      	ldrb	r2, [r2, #0]
 80027ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027de:	b29b      	uxth	r3, r3
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027e8:	2300      	movs	r3, #0
 80027ea:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	2201      	movs	r2, #1
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d11e      	bne.n	8002838 <HAL_SPI_TransmitReceive+0x324>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2246      	movs	r2, #70	; 0x46
 80027fe:	5a9b      	ldrh	r3, [r3, r2]
 8002800:	b29b      	uxth	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d018      	beq.n	8002838 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	330c      	adds	r3, #12
 800280c:	001a      	movs	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	7812      	ldrb	r2, [r2, #0]
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2246      	movs	r2, #70	; 0x46
 8002826:	5a9b      	ldrh	r3, [r3, r2]
 8002828:	b29b      	uxth	r3, r3
 800282a:	3b01      	subs	r3, #1
 800282c:	b299      	uxth	r1, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2246      	movs	r2, #70	; 0x46
 8002832:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002834:	2301      	movs	r3, #1
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002838:	f7fe fb7a 	bl	8000f30 <HAL_GetTick>
 800283c:	0002      	movs	r2, r0
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002844:	429a      	cmp	r2, r3
 8002846:	d802      	bhi.n	800284e <HAL_SPI_TransmitReceive+0x33a>
 8002848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284a:	3301      	adds	r3, #1
 800284c:	d102      	bne.n	8002854 <HAL_SPI_TransmitReceive+0x340>
 800284e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002850:	2b00      	cmp	r3, #0
 8002852:	d104      	bne.n	800285e <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8002854:	2323      	movs	r3, #35	; 0x23
 8002856:	18fb      	adds	r3, r7, r3
 8002858:	2203      	movs	r2, #3
 800285a:	701a      	strb	r2, [r3, #0]
        goto error;
 800285c:	e01b      	b.n	8002896 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002862:	b29b      	uxth	r3, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	d19d      	bne.n	80027a4 <HAL_SPI_TransmitReceive+0x290>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2246      	movs	r2, #70	; 0x46
 800286c:	5a9b      	ldrh	r3, [r3, r2]
 800286e:	b29b      	uxth	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d197      	bne.n	80027a4 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002874:	69fa      	ldr	r2, [r7, #28]
 8002876:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	0018      	movs	r0, r3
 800287c:	f000 f9aa 	bl	8002bd4 <SPI_EndRxTxTransaction>
 8002880:	1e03      	subs	r3, r0, #0
 8002882:	d007      	beq.n	8002894 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8002884:	2323      	movs	r3, #35	; 0x23
 8002886:	18fb      	adds	r3, r7, r3
 8002888:	2201      	movs	r2, #1
 800288a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2220      	movs	r2, #32
 8002890:	661a      	str	r2, [r3, #96]	; 0x60
 8002892:	e000      	b.n	8002896 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8002894:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	225d      	movs	r2, #93	; 0x5d
 800289a:	2101      	movs	r1, #1
 800289c:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	225c      	movs	r2, #92	; 0x5c
 80028a2:	2100      	movs	r1, #0
 80028a4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80028a6:	2323      	movs	r3, #35	; 0x23
 80028a8:	18fb      	adds	r3, r7, r3
 80028aa:	781b      	ldrb	r3, [r3, #0]
}
 80028ac:	0018      	movs	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	b00a      	add	sp, #40	; 0x28
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	ffffefff 	.word	0xffffefff

080028b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b088      	sub	sp, #32
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	603b      	str	r3, [r7, #0]
 80028c4:	1dfb      	adds	r3, r7, #7
 80028c6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80028c8:	f7fe fb32 	bl	8000f30 <HAL_GetTick>
 80028cc:	0002      	movs	r2, r0
 80028ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	18d3      	adds	r3, r2, r3
 80028d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80028d8:	f7fe fb2a 	bl	8000f30 <HAL_GetTick>
 80028dc:	0003      	movs	r3, r0
 80028de:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80028e0:	4b3a      	ldr	r3, [pc, #232]	; (80029cc <SPI_WaitFlagStateUntilTimeout+0x114>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	015b      	lsls	r3, r3, #5
 80028e6:	0d1b      	lsrs	r3, r3, #20
 80028e8:	69fa      	ldr	r2, [r7, #28]
 80028ea:	4353      	muls	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028ee:	e058      	b.n	80029a2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	3301      	adds	r3, #1
 80028f4:	d055      	beq.n	80029a2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028f6:	f7fe fb1b 	bl	8000f30 <HAL_GetTick>
 80028fa:	0002      	movs	r2, r0
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	69fa      	ldr	r2, [r7, #28]
 8002902:	429a      	cmp	r2, r3
 8002904:	d902      	bls.n	800290c <SPI_WaitFlagStateUntilTimeout+0x54>
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d142      	bne.n	8002992 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	21e0      	movs	r1, #224	; 0xe0
 8002918:	438a      	bics	r2, r1
 800291a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	2382      	movs	r3, #130	; 0x82
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	429a      	cmp	r2, r3
 8002926:	d113      	bne.n	8002950 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	2380      	movs	r3, #128	; 0x80
 800292e:	021b      	lsls	r3, r3, #8
 8002930:	429a      	cmp	r2, r3
 8002932:	d005      	beq.n	8002940 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	2380      	movs	r3, #128	; 0x80
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	429a      	cmp	r2, r3
 800293e:	d107      	bne.n	8002950 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2140      	movs	r1, #64	; 0x40
 800294c:	438a      	bics	r2, r1
 800294e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002954:	2380      	movs	r3, #128	; 0x80
 8002956:	019b      	lsls	r3, r3, #6
 8002958:	429a      	cmp	r2, r3
 800295a:	d110      	bne.n	800297e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	491a      	ldr	r1, [pc, #104]	; (80029d0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002968:	400a      	ands	r2, r1
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2180      	movs	r1, #128	; 0x80
 8002978:	0189      	lsls	r1, r1, #6
 800297a:	430a      	orrs	r2, r1
 800297c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	225d      	movs	r2, #93	; 0x5d
 8002982:	2101      	movs	r1, #1
 8002984:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	225c      	movs	r2, #92	; 0x5c
 800298a:	2100      	movs	r1, #0
 800298c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e017      	b.n	80029c2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002998:	2300      	movs	r3, #0
 800299a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	3b01      	subs	r3, #1
 80029a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	68ba      	ldr	r2, [r7, #8]
 80029aa:	4013      	ands	r3, r2
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	425a      	negs	r2, r3
 80029b2:	4153      	adcs	r3, r2
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	001a      	movs	r2, r3
 80029b8:	1dfb      	adds	r3, r7, #7
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d197      	bne.n	80028f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	0018      	movs	r0, r3
 80029c4:	46bd      	mov	sp, r7
 80029c6:	b008      	add	sp, #32
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	20000000 	.word	0x20000000
 80029d0:	ffffdfff 	.word	0xffffdfff

080029d4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	; 0x28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80029e2:	2317      	movs	r3, #23
 80029e4:	18fb      	adds	r3, r7, r3
 80029e6:	2200      	movs	r2, #0
 80029e8:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80029ea:	f7fe faa1 	bl	8000f30 <HAL_GetTick>
 80029ee:	0002      	movs	r2, r0
 80029f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f2:	1a9b      	subs	r3, r3, r2
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	18d3      	adds	r3, r2, r3
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80029fa:	f7fe fa99 	bl	8000f30 <HAL_GetTick>
 80029fe:	0003      	movs	r3, r0
 8002a00:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	330c      	adds	r3, #12
 8002a08:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002a0a:	4b41      	ldr	r3, [pc, #260]	; (8002b10 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	0013      	movs	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	189b      	adds	r3, r3, r2
 8002a14:	00da      	lsls	r2, r3, #3
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	0d1b      	lsrs	r3, r3, #20
 8002a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a1c:	4353      	muls	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002a20:	e068      	b.n	8002af4 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	23c0      	movs	r3, #192	; 0xc0
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d10a      	bne.n	8002a42 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d107      	bne.n	8002a42 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	2117      	movs	r1, #23
 8002a3a:	187b      	adds	r3, r7, r1
 8002a3c:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002a3e:	187b      	adds	r3, r7, r1
 8002a40:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	3301      	adds	r3, #1
 8002a46:	d055      	beq.n	8002af4 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a48:	f7fe fa72 	bl	8000f30 <HAL_GetTick>
 8002a4c:	0002      	movs	r2, r0
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d902      	bls.n	8002a5e <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d142      	bne.n	8002ae4 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685a      	ldr	r2, [r3, #4]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	21e0      	movs	r1, #224	; 0xe0
 8002a6a:	438a      	bics	r2, r1
 8002a6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	2382      	movs	r3, #130	; 0x82
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d113      	bne.n	8002aa2 <SPI_WaitFifoStateUntilTimeout+0xce>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	2380      	movs	r3, #128	; 0x80
 8002a80:	021b      	lsls	r3, r3, #8
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d005      	beq.n	8002a92 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	2380      	movs	r3, #128	; 0x80
 8002a8c:	00db      	lsls	r3, r3, #3
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d107      	bne.n	8002aa2 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2140      	movs	r1, #64	; 0x40
 8002a9e:	438a      	bics	r2, r1
 8002aa0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002aa6:	2380      	movs	r3, #128	; 0x80
 8002aa8:	019b      	lsls	r3, r3, #6
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d110      	bne.n	8002ad0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4916      	ldr	r1, [pc, #88]	; (8002b14 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002aba:	400a      	ands	r2, r1
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2180      	movs	r1, #128	; 0x80
 8002aca:	0189      	lsls	r1, r1, #6
 8002acc:	430a      	orrs	r2, r1
 8002ace:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	225d      	movs	r2, #93	; 0x5d
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	225c      	movs	r2, #92	; 0x5c
 8002adc:	2100      	movs	r1, #0
 8002ade:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e010      	b.n	8002b06 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	3b01      	subs	r3, #1
 8002af2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	4013      	ands	r3, r2
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d18e      	bne.n	8002a22 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	0018      	movs	r0, r3
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	b00a      	add	sp, #40	; 0x28
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	46c0      	nop			; (mov r8, r8)
 8002b10:	20000000 	.word	0x20000000
 8002b14:	ffffdfff 	.word	0xffffdfff

08002b18 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af02      	add	r7, sp, #8
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	2382      	movs	r3, #130	; 0x82
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d113      	bne.n	8002b58 <SPI_EndRxTransaction+0x40>
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	2380      	movs	r3, #128	; 0x80
 8002b36:	021b      	lsls	r3, r3, #8
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d005      	beq.n	8002b48 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	2380      	movs	r3, #128	; 0x80
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d107      	bne.n	8002b58 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2140      	movs	r1, #64	; 0x40
 8002b54:	438a      	bics	r2, r1
 8002b56:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	0013      	movs	r3, r2
 8002b62:	2200      	movs	r2, #0
 8002b64:	2180      	movs	r1, #128	; 0x80
 8002b66:	f7ff fea7 	bl	80028b8 <SPI_WaitFlagStateUntilTimeout>
 8002b6a:	1e03      	subs	r3, r0, #0
 8002b6c:	d007      	beq.n	8002b7e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b72:	2220      	movs	r2, #32
 8002b74:	431a      	orrs	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e026      	b.n	8002bcc <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	2382      	movs	r3, #130	; 0x82
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d11f      	bne.n	8002bca <SPI_EndRxTransaction+0xb2>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	689a      	ldr	r2, [r3, #8]
 8002b8e:	2380      	movs	r3, #128	; 0x80
 8002b90:	021b      	lsls	r3, r3, #8
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d005      	beq.n	8002ba2 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	2380      	movs	r3, #128	; 0x80
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d113      	bne.n	8002bca <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	23c0      	movs	r3, #192	; 0xc0
 8002ba6:	00d9      	lsls	r1, r3, #3
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	0013      	movs	r3, r2
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f7ff ff0f 	bl	80029d4 <SPI_WaitFifoStateUntilTimeout>
 8002bb6:	1e03      	subs	r3, r0, #0
 8002bb8:	d007      	beq.n	8002bca <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e000      	b.n	8002bcc <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	0018      	movs	r0, r3
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	b004      	add	sp, #16
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af02      	add	r7, sp, #8
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	23c0      	movs	r3, #192	; 0xc0
 8002be4:	0159      	lsls	r1, r3, #5
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	0013      	movs	r3, r2
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f7ff fef0 	bl	80029d4 <SPI_WaitFifoStateUntilTimeout>
 8002bf4:	1e03      	subs	r3, r0, #0
 8002bf6:	d007      	beq.n	8002c08 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e027      	b.n	8002c58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	0013      	movs	r3, r2
 8002c12:	2200      	movs	r2, #0
 8002c14:	2180      	movs	r1, #128	; 0x80
 8002c16:	f7ff fe4f 	bl	80028b8 <SPI_WaitFlagStateUntilTimeout>
 8002c1a:	1e03      	subs	r3, r0, #0
 8002c1c:	d007      	beq.n	8002c2e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c22:	2220      	movs	r2, #32
 8002c24:	431a      	orrs	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e014      	b.n	8002c58 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	23c0      	movs	r3, #192	; 0xc0
 8002c32:	00d9      	lsls	r1, r3, #3
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	0013      	movs	r3, r2
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f7ff fec9 	bl	80029d4 <SPI_WaitFifoStateUntilTimeout>
 8002c42:	1e03      	subs	r3, r0, #0
 8002c44:	d007      	beq.n	8002c56 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e000      	b.n	8002c58 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	0018      	movs	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	b004      	add	sp, #16
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e046      	b.n	8002d00 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2284      	movs	r2, #132	; 0x84
 8002c76:	589b      	ldr	r3, [r3, r2]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d107      	bne.n	8002c8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2280      	movs	r2, #128	; 0x80
 8002c80:	2100      	movs	r1, #0
 8002c82:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	0018      	movs	r0, r3
 8002c88:	f7fe f846 	bl	8000d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2284      	movs	r2, #132	; 0x84
 8002c90:	2124      	movs	r1, #36	; 0x24
 8002c92:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	438a      	bics	r2, r1
 8002ca2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f000 f830 	bl	8002d0c <UART_SetConfig>
 8002cac:	0003      	movs	r3, r0
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d101      	bne.n	8002cb6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e024      	b.n	8002d00 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f000 fab3 	bl	800322c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685a      	ldr	r2, [r3, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	490d      	ldr	r1, [pc, #52]	; (8002d08 <HAL_UART_Init+0xa8>)
 8002cd2:	400a      	ands	r2, r1
 8002cd4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689a      	ldr	r2, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	212a      	movs	r1, #42	; 0x2a
 8002ce2:	438a      	bics	r2, r1
 8002ce4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2101      	movs	r1, #1
 8002cf2:	430a      	orrs	r2, r1
 8002cf4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	0018      	movs	r0, r3
 8002cfa:	f000 fb4b 	bl	8003394 <UART_CheckIdleState>
 8002cfe:	0003      	movs	r3, r0
}
 8002d00:	0018      	movs	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b002      	add	sp, #8
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	ffffb7ff 	.word	0xffffb7ff

08002d0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d0c:	b5b0      	push	{r4, r5, r7, lr}
 8002d0e:	b090      	sub	sp, #64	; 0x40
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d14:	231a      	movs	r3, #26
 8002d16:	2220      	movs	r2, #32
 8002d18:	4694      	mov	ip, r2
 8002d1a:	44bc      	add	ip, r7
 8002d1c:	4463      	add	r3, ip
 8002d1e:	2200      	movs	r2, #0
 8002d20:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d24:	689a      	ldr	r2, [r3, #8]
 8002d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2e:	695b      	ldr	r3, [r3, #20]
 8002d30:	431a      	orrs	r2, r3
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4ac7      	ldr	r2, [pc, #796]	; (8003060 <UART_SetConfig+0x354>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	0019      	movs	r1, r3
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d4c:	430b      	orrs	r3, r1
 8002d4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	4ac3      	ldr	r2, [pc, #780]	; (8003064 <UART_SetConfig+0x358>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	68d9      	ldr	r1, [r3, #12]
 8002d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	0003      	movs	r3, r0
 8002d66:	430b      	orrs	r3, r1
 8002d68:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4abc      	ldr	r2, [pc, #752]	; (8003068 <UART_SetConfig+0x35c>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d004      	beq.n	8002d84 <UART_SetConfig+0x78>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d80:	4313      	orrs	r3, r2
 8002d82:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	4ab8      	ldr	r2, [pc, #736]	; (800306c <UART_SetConfig+0x360>)
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	0019      	movs	r1, r3
 8002d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d96:	430b      	orrs	r3, r1
 8002d98:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da0:	220f      	movs	r2, #15
 8002da2:	4393      	bics	r3, r2
 8002da4:	0018      	movs	r0, r3
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	0003      	movs	r3, r0
 8002db0:	430b      	orrs	r3, r1
 8002db2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4aad      	ldr	r2, [pc, #692]	; (8003070 <UART_SetConfig+0x364>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d136      	bne.n	8002e2c <UART_SetConfig+0x120>
 8002dbe:	4bad      	ldr	r3, [pc, #692]	; (8003074 <UART_SetConfig+0x368>)
 8002dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dc2:	2203      	movs	r2, #3
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	d020      	beq.n	8002e0c <UART_SetConfig+0x100>
 8002dca:	d827      	bhi.n	8002e1c <UART_SetConfig+0x110>
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d00d      	beq.n	8002dec <UART_SetConfig+0xe0>
 8002dd0:	d824      	bhi.n	8002e1c <UART_SetConfig+0x110>
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <UART_SetConfig+0xd0>
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d010      	beq.n	8002dfc <UART_SetConfig+0xf0>
 8002dda:	e01f      	b.n	8002e1c <UART_SetConfig+0x110>
 8002ddc:	231b      	movs	r3, #27
 8002dde:	2220      	movs	r2, #32
 8002de0:	4694      	mov	ip, r2
 8002de2:	44bc      	add	ip, r7
 8002de4:	4463      	add	r3, ip
 8002de6:	2200      	movs	r2, #0
 8002de8:	701a      	strb	r2, [r3, #0]
 8002dea:	e07c      	b.n	8002ee6 <UART_SetConfig+0x1da>
 8002dec:	231b      	movs	r3, #27
 8002dee:	2220      	movs	r2, #32
 8002df0:	4694      	mov	ip, r2
 8002df2:	44bc      	add	ip, r7
 8002df4:	4463      	add	r3, ip
 8002df6:	2202      	movs	r2, #2
 8002df8:	701a      	strb	r2, [r3, #0]
 8002dfa:	e074      	b.n	8002ee6 <UART_SetConfig+0x1da>
 8002dfc:	231b      	movs	r3, #27
 8002dfe:	2220      	movs	r2, #32
 8002e00:	4694      	mov	ip, r2
 8002e02:	44bc      	add	ip, r7
 8002e04:	4463      	add	r3, ip
 8002e06:	2204      	movs	r2, #4
 8002e08:	701a      	strb	r2, [r3, #0]
 8002e0a:	e06c      	b.n	8002ee6 <UART_SetConfig+0x1da>
 8002e0c:	231b      	movs	r3, #27
 8002e0e:	2220      	movs	r2, #32
 8002e10:	4694      	mov	ip, r2
 8002e12:	44bc      	add	ip, r7
 8002e14:	4463      	add	r3, ip
 8002e16:	2208      	movs	r2, #8
 8002e18:	701a      	strb	r2, [r3, #0]
 8002e1a:	e064      	b.n	8002ee6 <UART_SetConfig+0x1da>
 8002e1c:	231b      	movs	r3, #27
 8002e1e:	2220      	movs	r2, #32
 8002e20:	4694      	mov	ip, r2
 8002e22:	44bc      	add	ip, r7
 8002e24:	4463      	add	r3, ip
 8002e26:	2210      	movs	r2, #16
 8002e28:	701a      	strb	r2, [r3, #0]
 8002e2a:	e05c      	b.n	8002ee6 <UART_SetConfig+0x1da>
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a91      	ldr	r2, [pc, #580]	; (8003078 <UART_SetConfig+0x36c>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d107      	bne.n	8002e46 <UART_SetConfig+0x13a>
 8002e36:	231b      	movs	r3, #27
 8002e38:	2220      	movs	r2, #32
 8002e3a:	4694      	mov	ip, r2
 8002e3c:	44bc      	add	ip, r7
 8002e3e:	4463      	add	r3, ip
 8002e40:	2200      	movs	r2, #0
 8002e42:	701a      	strb	r2, [r3, #0]
 8002e44:	e04f      	b.n	8002ee6 <UART_SetConfig+0x1da>
 8002e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a87      	ldr	r2, [pc, #540]	; (8003068 <UART_SetConfig+0x35c>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d143      	bne.n	8002ed8 <UART_SetConfig+0x1cc>
 8002e50:	4b88      	ldr	r3, [pc, #544]	; (8003074 <UART_SetConfig+0x368>)
 8002e52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002e54:	23c0      	movs	r3, #192	; 0xc0
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	4013      	ands	r3, r2
 8002e5a:	22c0      	movs	r2, #192	; 0xc0
 8002e5c:	0112      	lsls	r2, r2, #4
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d02a      	beq.n	8002eb8 <UART_SetConfig+0x1ac>
 8002e62:	22c0      	movs	r2, #192	; 0xc0
 8002e64:	0112      	lsls	r2, r2, #4
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d82e      	bhi.n	8002ec8 <UART_SetConfig+0x1bc>
 8002e6a:	2280      	movs	r2, #128	; 0x80
 8002e6c:	0112      	lsls	r2, r2, #4
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d012      	beq.n	8002e98 <UART_SetConfig+0x18c>
 8002e72:	2280      	movs	r2, #128	; 0x80
 8002e74:	0112      	lsls	r2, r2, #4
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d826      	bhi.n	8002ec8 <UART_SetConfig+0x1bc>
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d004      	beq.n	8002e88 <UART_SetConfig+0x17c>
 8002e7e:	2280      	movs	r2, #128	; 0x80
 8002e80:	00d2      	lsls	r2, r2, #3
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d010      	beq.n	8002ea8 <UART_SetConfig+0x19c>
 8002e86:	e01f      	b.n	8002ec8 <UART_SetConfig+0x1bc>
 8002e88:	231b      	movs	r3, #27
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	4694      	mov	ip, r2
 8002e8e:	44bc      	add	ip, r7
 8002e90:	4463      	add	r3, ip
 8002e92:	2200      	movs	r2, #0
 8002e94:	701a      	strb	r2, [r3, #0]
 8002e96:	e026      	b.n	8002ee6 <UART_SetConfig+0x1da>
 8002e98:	231b      	movs	r3, #27
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	4694      	mov	ip, r2
 8002e9e:	44bc      	add	ip, r7
 8002ea0:	4463      	add	r3, ip
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	701a      	strb	r2, [r3, #0]
 8002ea6:	e01e      	b.n	8002ee6 <UART_SetConfig+0x1da>
 8002ea8:	231b      	movs	r3, #27
 8002eaa:	2220      	movs	r2, #32
 8002eac:	4694      	mov	ip, r2
 8002eae:	44bc      	add	ip, r7
 8002eb0:	4463      	add	r3, ip
 8002eb2:	2204      	movs	r2, #4
 8002eb4:	701a      	strb	r2, [r3, #0]
 8002eb6:	e016      	b.n	8002ee6 <UART_SetConfig+0x1da>
 8002eb8:	231b      	movs	r3, #27
 8002eba:	2220      	movs	r2, #32
 8002ebc:	4694      	mov	ip, r2
 8002ebe:	44bc      	add	ip, r7
 8002ec0:	4463      	add	r3, ip
 8002ec2:	2208      	movs	r2, #8
 8002ec4:	701a      	strb	r2, [r3, #0]
 8002ec6:	e00e      	b.n	8002ee6 <UART_SetConfig+0x1da>
 8002ec8:	231b      	movs	r3, #27
 8002eca:	2220      	movs	r2, #32
 8002ecc:	4694      	mov	ip, r2
 8002ece:	44bc      	add	ip, r7
 8002ed0:	4463      	add	r3, ip
 8002ed2:	2210      	movs	r2, #16
 8002ed4:	701a      	strb	r2, [r3, #0]
 8002ed6:	e006      	b.n	8002ee6 <UART_SetConfig+0x1da>
 8002ed8:	231b      	movs	r3, #27
 8002eda:	2220      	movs	r2, #32
 8002edc:	4694      	mov	ip, r2
 8002ede:	44bc      	add	ip, r7
 8002ee0:	4463      	add	r3, ip
 8002ee2:	2210      	movs	r2, #16
 8002ee4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a5f      	ldr	r2, [pc, #380]	; (8003068 <UART_SetConfig+0x35c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d000      	beq.n	8002ef2 <UART_SetConfig+0x1e6>
 8002ef0:	e096      	b.n	8003020 <UART_SetConfig+0x314>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002ef2:	231b      	movs	r3, #27
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	4694      	mov	ip, r2
 8002ef8:	44bc      	add	ip, r7
 8002efa:	4463      	add	r3, ip
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	2b08      	cmp	r3, #8
 8002f00:	d015      	beq.n	8002f2e <UART_SetConfig+0x222>
 8002f02:	dc18      	bgt.n	8002f36 <UART_SetConfig+0x22a>
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d00d      	beq.n	8002f24 <UART_SetConfig+0x218>
 8002f08:	dc15      	bgt.n	8002f36 <UART_SetConfig+0x22a>
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <UART_SetConfig+0x208>
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d005      	beq.n	8002f1e <UART_SetConfig+0x212>
 8002f12:	e010      	b.n	8002f36 <UART_SetConfig+0x22a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f14:	f7fe ff8c 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 8002f18:	0003      	movs	r3, r0
 8002f1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f1c:	e015      	b.n	8002f4a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f1e:	4b57      	ldr	r3, [pc, #348]	; (800307c <UART_SetConfig+0x370>)
 8002f20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f22:	e012      	b.n	8002f4a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f24:	f7fe fef8 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 8002f28:	0003      	movs	r3, r0
 8002f2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f2c:	e00d      	b.n	8002f4a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f2e:	2380      	movs	r3, #128	; 0x80
 8002f30:	021b      	lsls	r3, r3, #8
 8002f32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002f34:	e009      	b.n	8002f4a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8002f3a:	231a      	movs	r3, #26
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	4694      	mov	ip, r2
 8002f40:	44bc      	add	ip, r7
 8002f42:	4463      	add	r3, ip
 8002f44:	2201      	movs	r2, #1
 8002f46:	701a      	strb	r2, [r3, #0]
        break;
 8002f48:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d100      	bne.n	8002f52 <UART_SetConfig+0x246>
 8002f50:	e14f      	b.n	80031f2 <UART_SetConfig+0x4e6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f56:	4b4a      	ldr	r3, [pc, #296]	; (8003080 <UART_SetConfig+0x374>)
 8002f58:	0052      	lsls	r2, r2, #1
 8002f5a:	5ad3      	ldrh	r3, [r2, r3]
 8002f5c:	0019      	movs	r1, r3
 8002f5e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f60:	f7fd f8ce 	bl	8000100 <__udivsi3>
 8002f64:	0003      	movs	r3, r0
 8002f66:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	0013      	movs	r3, r2
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	189b      	adds	r3, r3, r2
 8002f72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d305      	bcc.n	8002f84 <UART_SetConfig+0x278>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d907      	bls.n	8002f94 <UART_SetConfig+0x288>
      {
        ret = HAL_ERROR;
 8002f84:	231a      	movs	r3, #26
 8002f86:	2220      	movs	r2, #32
 8002f88:	4694      	mov	ip, r2
 8002f8a:	44bc      	add	ip, r7
 8002f8c:	4463      	add	r3, ip
 8002f8e:	2201      	movs	r2, #1
 8002f90:	701a      	strb	r2, [r3, #0]
 8002f92:	e12e      	b.n	80031f2 <UART_SetConfig+0x4e6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f96:	61bb      	str	r3, [r7, #24]
 8002f98:	2300      	movs	r3, #0
 8002f9a:	61fb      	str	r3, [r7, #28]
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fa0:	4b37      	ldr	r3, [pc, #220]	; (8003080 <UART_SetConfig+0x374>)
 8002fa2:	0052      	lsls	r2, r2, #1
 8002fa4:	5ad3      	ldrh	r3, [r2, r3]
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	2300      	movs	r3, #0
 8002faa:	617b      	str	r3, [r7, #20]
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	69b8      	ldr	r0, [r7, #24]
 8002fb2:	69f9      	ldr	r1, [r7, #28]
 8002fb4:	f7fd f930 	bl	8000218 <__aeabi_uldivmod>
 8002fb8:	0002      	movs	r2, r0
 8002fba:	000b      	movs	r3, r1
 8002fbc:	0e11      	lsrs	r1, r2, #24
 8002fbe:	021d      	lsls	r5, r3, #8
 8002fc0:	430d      	orrs	r5, r1
 8002fc2:	0214      	lsls	r4, r2, #8
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	085b      	lsrs	r3, r3, #1
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60fb      	str	r3, [r7, #12]
 8002fd0:	68b8      	ldr	r0, [r7, #8]
 8002fd2:	68f9      	ldr	r1, [r7, #12]
 8002fd4:	1900      	adds	r0, r0, r4
 8002fd6:	4169      	adcs	r1, r5
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	603b      	str	r3, [r7, #0]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	607b      	str	r3, [r7, #4]
 8002fe2:	683a      	ldr	r2, [r7, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f7fd f917 	bl	8000218 <__aeabi_uldivmod>
 8002fea:	0002      	movs	r2, r0
 8002fec:	000b      	movs	r3, r1
 8002fee:	0013      	movs	r3, r2
 8002ff0:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ff4:	23c0      	movs	r3, #192	; 0xc0
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d309      	bcc.n	8003010 <UART_SetConfig+0x304>
 8002ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ffe:	2380      	movs	r3, #128	; 0x80
 8003000:	035b      	lsls	r3, r3, #13
 8003002:	429a      	cmp	r2, r3
 8003004:	d204      	bcs.n	8003010 <UART_SetConfig+0x304>
        {
          huart->Instance->BRR = usartdiv;
 8003006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800300c:	60da      	str	r2, [r3, #12]
 800300e:	e0f0      	b.n	80031f2 <UART_SetConfig+0x4e6>
        }
        else
        {
          ret = HAL_ERROR;
 8003010:	231a      	movs	r3, #26
 8003012:	2220      	movs	r2, #32
 8003014:	4694      	mov	ip, r2
 8003016:	44bc      	add	ip, r7
 8003018:	4463      	add	r3, ip
 800301a:	2201      	movs	r2, #1
 800301c:	701a      	strb	r2, [r3, #0]
 800301e:	e0e8      	b.n	80031f2 <UART_SetConfig+0x4e6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003022:	69da      	ldr	r2, [r3, #28]
 8003024:	2380      	movs	r3, #128	; 0x80
 8003026:	021b      	lsls	r3, r3, #8
 8003028:	429a      	cmp	r2, r3
 800302a:	d000      	beq.n	800302e <UART_SetConfig+0x322>
 800302c:	e086      	b.n	800313c <UART_SetConfig+0x430>
  {
    switch (clocksource)
 800302e:	231b      	movs	r3, #27
 8003030:	2220      	movs	r2, #32
 8003032:	4694      	mov	ip, r2
 8003034:	44bc      	add	ip, r7
 8003036:	4463      	add	r3, ip
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	2b08      	cmp	r3, #8
 800303c:	d027      	beq.n	800308e <UART_SetConfig+0x382>
 800303e:	dc2a      	bgt.n	8003096 <UART_SetConfig+0x38a>
 8003040:	2b04      	cmp	r3, #4
 8003042:	d01f      	beq.n	8003084 <UART_SetConfig+0x378>
 8003044:	dc27      	bgt.n	8003096 <UART_SetConfig+0x38a>
 8003046:	2b00      	cmp	r3, #0
 8003048:	d002      	beq.n	8003050 <UART_SetConfig+0x344>
 800304a:	2b02      	cmp	r3, #2
 800304c:	d005      	beq.n	800305a <UART_SetConfig+0x34e>
 800304e:	e022      	b.n	8003096 <UART_SetConfig+0x38a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003050:	f7fe feee 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 8003054:	0003      	movs	r3, r0
 8003056:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003058:	e027      	b.n	80030aa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800305a:	4b08      	ldr	r3, [pc, #32]	; (800307c <UART_SetConfig+0x370>)
 800305c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800305e:	e024      	b.n	80030aa <UART_SetConfig+0x39e>
 8003060:	cfff69f3 	.word	0xcfff69f3
 8003064:	ffffcfff 	.word	0xffffcfff
 8003068:	40008000 	.word	0x40008000
 800306c:	11fff4ff 	.word	0x11fff4ff
 8003070:	40013800 	.word	0x40013800
 8003074:	40021000 	.word	0x40021000
 8003078:	40004400 	.word	0x40004400
 800307c:	00f42400 	.word	0x00f42400
 8003080:	080036f4 	.word	0x080036f4
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003084:	f7fe fe48 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 8003088:	0003      	movs	r3, r0
 800308a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800308c:	e00d      	b.n	80030aa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800308e:	2380      	movs	r3, #128	; 0x80
 8003090:	021b      	lsls	r3, r3, #8
 8003092:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003094:	e009      	b.n	80030aa <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003096:	2300      	movs	r3, #0
 8003098:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800309a:	231a      	movs	r3, #26
 800309c:	2220      	movs	r2, #32
 800309e:	4694      	mov	ip, r2
 80030a0:	44bc      	add	ip, r7
 80030a2:	4463      	add	r3, ip
 80030a4:	2201      	movs	r2, #1
 80030a6:	701a      	strb	r2, [r3, #0]
        break;
 80030a8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d100      	bne.n	80030b2 <UART_SetConfig+0x3a6>
 80030b0:	e09f      	b.n	80031f2 <UART_SetConfig+0x4e6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030b6:	4b5b      	ldr	r3, [pc, #364]	; (8003224 <UART_SetConfig+0x518>)
 80030b8:	0052      	lsls	r2, r2, #1
 80030ba:	5ad3      	ldrh	r3, [r2, r3]
 80030bc:	0019      	movs	r1, r3
 80030be:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80030c0:	f7fd f81e 	bl	8000100 <__udivsi3>
 80030c4:	0003      	movs	r3, r0
 80030c6:	005a      	lsls	r2, r3, #1
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	085b      	lsrs	r3, r3, #1
 80030ce:	18d2      	adds	r2, r2, r3
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	0019      	movs	r1, r3
 80030d6:	0010      	movs	r0, r2
 80030d8:	f7fd f812 	bl	8000100 <__udivsi3>
 80030dc:	0003      	movs	r3, r0
 80030de:	b29b      	uxth	r3, r3
 80030e0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e4:	2b0f      	cmp	r3, #15
 80030e6:	d921      	bls.n	800312c <UART_SetConfig+0x420>
 80030e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ea:	2380      	movs	r3, #128	; 0x80
 80030ec:	025b      	lsls	r3, r3, #9
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d21c      	bcs.n	800312c <UART_SetConfig+0x420>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	200e      	movs	r0, #14
 80030f8:	2420      	movs	r4, #32
 80030fa:	193b      	adds	r3, r7, r4
 80030fc:	181b      	adds	r3, r3, r0
 80030fe:	210f      	movs	r1, #15
 8003100:	438a      	bics	r2, r1
 8003102:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003106:	085b      	lsrs	r3, r3, #1
 8003108:	b29b      	uxth	r3, r3
 800310a:	2207      	movs	r2, #7
 800310c:	4013      	ands	r3, r2
 800310e:	b299      	uxth	r1, r3
 8003110:	193b      	adds	r3, r7, r4
 8003112:	181b      	adds	r3, r3, r0
 8003114:	193a      	adds	r2, r7, r4
 8003116:	1812      	adds	r2, r2, r0
 8003118:	8812      	ldrh	r2, [r2, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	193a      	adds	r2, r7, r4
 8003124:	1812      	adds	r2, r2, r0
 8003126:	8812      	ldrh	r2, [r2, #0]
 8003128:	60da      	str	r2, [r3, #12]
 800312a:	e062      	b.n	80031f2 <UART_SetConfig+0x4e6>
      }
      else
      {
        ret = HAL_ERROR;
 800312c:	231a      	movs	r3, #26
 800312e:	2220      	movs	r2, #32
 8003130:	4694      	mov	ip, r2
 8003132:	44bc      	add	ip, r7
 8003134:	4463      	add	r3, ip
 8003136:	2201      	movs	r2, #1
 8003138:	701a      	strb	r2, [r3, #0]
 800313a:	e05a      	b.n	80031f2 <UART_SetConfig+0x4e6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800313c:	231b      	movs	r3, #27
 800313e:	2220      	movs	r2, #32
 8003140:	4694      	mov	ip, r2
 8003142:	44bc      	add	ip, r7
 8003144:	4463      	add	r3, ip
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	2b08      	cmp	r3, #8
 800314a:	d015      	beq.n	8003178 <UART_SetConfig+0x46c>
 800314c:	dc18      	bgt.n	8003180 <UART_SetConfig+0x474>
 800314e:	2b04      	cmp	r3, #4
 8003150:	d00d      	beq.n	800316e <UART_SetConfig+0x462>
 8003152:	dc15      	bgt.n	8003180 <UART_SetConfig+0x474>
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <UART_SetConfig+0x452>
 8003158:	2b02      	cmp	r3, #2
 800315a:	d005      	beq.n	8003168 <UART_SetConfig+0x45c>
 800315c:	e010      	b.n	8003180 <UART_SetConfig+0x474>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800315e:	f7fe fe67 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 8003162:	0003      	movs	r3, r0
 8003164:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003166:	e015      	b.n	8003194 <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003168:	4b2f      	ldr	r3, [pc, #188]	; (8003228 <UART_SetConfig+0x51c>)
 800316a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800316c:	e012      	b.n	8003194 <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800316e:	f7fe fdd3 	bl	8001d18 <HAL_RCC_GetSysClockFreq>
 8003172:	0003      	movs	r3, r0
 8003174:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003176:	e00d      	b.n	8003194 <UART_SetConfig+0x488>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003178:	2380      	movs	r3, #128	; 0x80
 800317a:	021b      	lsls	r3, r3, #8
 800317c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800317e:	e009      	b.n	8003194 <UART_SetConfig+0x488>
      default:
        pclk = 0U;
 8003180:	2300      	movs	r3, #0
 8003182:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003184:	231a      	movs	r3, #26
 8003186:	2220      	movs	r2, #32
 8003188:	4694      	mov	ip, r2
 800318a:	44bc      	add	ip, r7
 800318c:	4463      	add	r3, ip
 800318e:	2201      	movs	r2, #1
 8003190:	701a      	strb	r2, [r3, #0]
        break;
 8003192:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003196:	2b00      	cmp	r3, #0
 8003198:	d02b      	beq.n	80031f2 <UART_SetConfig+0x4e6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800319a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800319e:	4b21      	ldr	r3, [pc, #132]	; (8003224 <UART_SetConfig+0x518>)
 80031a0:	0052      	lsls	r2, r2, #1
 80031a2:	5ad3      	ldrh	r3, [r2, r3]
 80031a4:	0019      	movs	r1, r3
 80031a6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80031a8:	f7fc ffaa 	bl	8000100 <__udivsi3>
 80031ac:	0003      	movs	r3, r0
 80031ae:	001a      	movs	r2, r3
 80031b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	085b      	lsrs	r3, r3, #1
 80031b6:	18d2      	adds	r2, r2, r3
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	0019      	movs	r1, r3
 80031be:	0010      	movs	r0, r2
 80031c0:	f7fc ff9e 	bl	8000100 <__udivsi3>
 80031c4:	0003      	movs	r3, r0
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031cc:	2b0f      	cmp	r3, #15
 80031ce:	d909      	bls.n	80031e4 <UART_SetConfig+0x4d8>
 80031d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031d2:	2380      	movs	r3, #128	; 0x80
 80031d4:	025b      	lsls	r3, r3, #9
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d204      	bcs.n	80031e4 <UART_SetConfig+0x4d8>
      {
        huart->Instance->BRR = usartdiv;
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031e0:	60da      	str	r2, [r3, #12]
 80031e2:	e006      	b.n	80031f2 <UART_SetConfig+0x4e6>
      }
      else
      {
        ret = HAL_ERROR;
 80031e4:	231a      	movs	r3, #26
 80031e6:	2220      	movs	r2, #32
 80031e8:	4694      	mov	ip, r2
 80031ea:	44bc      	add	ip, r7
 80031ec:	4463      	add	r3, ip
 80031ee:	2201      	movs	r2, #1
 80031f0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	226a      	movs	r2, #106	; 0x6a
 80031f6:	2101      	movs	r1, #1
 80031f8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	2268      	movs	r2, #104	; 0x68
 80031fe:	2101      	movs	r1, #1
 8003200:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	2200      	movs	r2, #0
 8003206:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320a:	2200      	movs	r2, #0
 800320c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800320e:	231a      	movs	r3, #26
 8003210:	2220      	movs	r2, #32
 8003212:	4694      	mov	ip, r2
 8003214:	44bc      	add	ip, r7
 8003216:	4463      	add	r3, ip
 8003218:	781b      	ldrb	r3, [r3, #0]
}
 800321a:	0018      	movs	r0, r3
 800321c:	46bd      	mov	sp, r7
 800321e:	b010      	add	sp, #64	; 0x40
 8003220:	bdb0      	pop	{r4, r5, r7, pc}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	080036f4 	.word	0x080036f4
 8003228:	00f42400 	.word	0x00f42400

0800322c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003238:	2201      	movs	r2, #1
 800323a:	4013      	ands	r3, r2
 800323c:	d00b      	beq.n	8003256 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	4a4a      	ldr	r2, [pc, #296]	; (8003370 <UART_AdvFeatureConfig+0x144>)
 8003246:	4013      	ands	r3, r2
 8003248:	0019      	movs	r1, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325a:	2202      	movs	r2, #2
 800325c:	4013      	ands	r3, r2
 800325e:	d00b      	beq.n	8003278 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	4a43      	ldr	r2, [pc, #268]	; (8003374 <UART_AdvFeatureConfig+0x148>)
 8003268:	4013      	ands	r3, r2
 800326a:	0019      	movs	r1, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	430a      	orrs	r2, r1
 8003276:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327c:	2204      	movs	r2, #4
 800327e:	4013      	ands	r3, r2
 8003280:	d00b      	beq.n	800329a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	4a3b      	ldr	r2, [pc, #236]	; (8003378 <UART_AdvFeatureConfig+0x14c>)
 800328a:	4013      	ands	r3, r2
 800328c:	0019      	movs	r1, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329e:	2208      	movs	r2, #8
 80032a0:	4013      	ands	r3, r2
 80032a2:	d00b      	beq.n	80032bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	4a34      	ldr	r2, [pc, #208]	; (800337c <UART_AdvFeatureConfig+0x150>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	0019      	movs	r1, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c0:	2210      	movs	r2, #16
 80032c2:	4013      	ands	r3, r2
 80032c4:	d00b      	beq.n	80032de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	4a2c      	ldr	r2, [pc, #176]	; (8003380 <UART_AdvFeatureConfig+0x154>)
 80032ce:	4013      	ands	r3, r2
 80032d0:	0019      	movs	r1, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e2:	2220      	movs	r2, #32
 80032e4:	4013      	ands	r3, r2
 80032e6:	d00b      	beq.n	8003300 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	4a25      	ldr	r2, [pc, #148]	; (8003384 <UART_AdvFeatureConfig+0x158>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	0019      	movs	r1, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	2240      	movs	r2, #64	; 0x40
 8003306:	4013      	ands	r3, r2
 8003308:	d01d      	beq.n	8003346 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	4a1d      	ldr	r2, [pc, #116]	; (8003388 <UART_AdvFeatureConfig+0x15c>)
 8003312:	4013      	ands	r3, r2
 8003314:	0019      	movs	r1, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003326:	2380      	movs	r3, #128	; 0x80
 8003328:	035b      	lsls	r3, r3, #13
 800332a:	429a      	cmp	r2, r3
 800332c:	d10b      	bne.n	8003346 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	4a15      	ldr	r2, [pc, #84]	; (800338c <UART_AdvFeatureConfig+0x160>)
 8003336:	4013      	ands	r3, r2
 8003338:	0019      	movs	r1, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	430a      	orrs	r2, r1
 8003344:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334a:	2280      	movs	r2, #128	; 0x80
 800334c:	4013      	ands	r3, r2
 800334e:	d00b      	beq.n	8003368 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	4a0e      	ldr	r2, [pc, #56]	; (8003390 <UART_AdvFeatureConfig+0x164>)
 8003358:	4013      	ands	r3, r2
 800335a:	0019      	movs	r1, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	605a      	str	r2, [r3, #4]
  }
}
 8003368:	46c0      	nop			; (mov r8, r8)
 800336a:	46bd      	mov	sp, r7
 800336c:	b002      	add	sp, #8
 800336e:	bd80      	pop	{r7, pc}
 8003370:	fffdffff 	.word	0xfffdffff
 8003374:	fffeffff 	.word	0xfffeffff
 8003378:	fffbffff 	.word	0xfffbffff
 800337c:	ffff7fff 	.word	0xffff7fff
 8003380:	ffffefff 	.word	0xffffefff
 8003384:	ffffdfff 	.word	0xffffdfff
 8003388:	ffefffff 	.word	0xffefffff
 800338c:	ff9fffff 	.word	0xff9fffff
 8003390:	fff7ffff 	.word	0xfff7ffff

08003394 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b086      	sub	sp, #24
 8003398:	af02      	add	r7, sp, #8
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	228c      	movs	r2, #140	; 0x8c
 80033a0:	2100      	movs	r1, #0
 80033a2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80033a4:	f7fd fdc4 	bl	8000f30 <HAL_GetTick>
 80033a8:	0003      	movs	r3, r0
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2208      	movs	r2, #8
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b08      	cmp	r3, #8
 80033b8:	d10c      	bne.n	80033d4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2280      	movs	r2, #128	; 0x80
 80033be:	0391      	lsls	r1, r2, #14
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	4a18      	ldr	r2, [pc, #96]	; (8003424 <UART_CheckIdleState+0x90>)
 80033c4:	9200      	str	r2, [sp, #0]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f000 f82e 	bl	8003428 <UART_WaitOnFlagUntilTimeout>
 80033cc:	1e03      	subs	r3, r0, #0
 80033ce:	d001      	beq.n	80033d4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e023      	b.n	800341c <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2204      	movs	r2, #4
 80033dc:	4013      	ands	r3, r2
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d10c      	bne.n	80033fc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2280      	movs	r2, #128	; 0x80
 80033e6:	03d1      	lsls	r1, r2, #15
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	4a0e      	ldr	r2, [pc, #56]	; (8003424 <UART_CheckIdleState+0x90>)
 80033ec:	9200      	str	r2, [sp, #0]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f000 f81a 	bl	8003428 <UART_WaitOnFlagUntilTimeout>
 80033f4:	1e03      	subs	r3, r0, #0
 80033f6:	d001      	beq.n	80033fc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e00f      	b.n	800341c <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2284      	movs	r2, #132	; 0x84
 8003400:	2120      	movs	r1, #32
 8003402:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2288      	movs	r2, #136	; 0x88
 8003408:	2120      	movs	r1, #32
 800340a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2280      	movs	r2, #128	; 0x80
 8003416:	2100      	movs	r1, #0
 8003418:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	0018      	movs	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	b004      	add	sp, #16
 8003422:	bd80      	pop	{r7, pc}
 8003424:	01ffffff 	.word	0x01ffffff

08003428 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b094      	sub	sp, #80	; 0x50
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	603b      	str	r3, [r7, #0]
 8003434:	1dfb      	adds	r3, r7, #7
 8003436:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003438:	e0a7      	b.n	800358a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800343a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800343c:	3301      	adds	r3, #1
 800343e:	d100      	bne.n	8003442 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003440:	e0a3      	b.n	800358a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003442:	f7fd fd75 	bl	8000f30 <HAL_GetTick>
 8003446:	0002      	movs	r2, r0
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800344e:	429a      	cmp	r2, r3
 8003450:	d302      	bcc.n	8003458 <UART_WaitOnFlagUntilTimeout+0x30>
 8003452:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003454:	2b00      	cmp	r3, #0
 8003456:	d13f      	bne.n	80034d8 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003458:	f3ef 8310 	mrs	r3, PRIMASK
 800345c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800345e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003460:	647b      	str	r3, [r7, #68]	; 0x44
 8003462:	2301      	movs	r3, #1
 8003464:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003468:	f383 8810 	msr	PRIMASK, r3
}
 800346c:	46c0      	nop			; (mov r8, r8)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	494e      	ldr	r1, [pc, #312]	; (80035b4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800347a:	400a      	ands	r2, r1
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003480:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003484:	f383 8810 	msr	PRIMASK, r3
}
 8003488:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800348a:	f3ef 8310 	mrs	r3, PRIMASK
 800348e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003492:	643b      	str	r3, [r7, #64]	; 0x40
 8003494:	2301      	movs	r3, #1
 8003496:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349a:	f383 8810 	msr	PRIMASK, r3
}
 800349e:	46c0      	nop			; (mov r8, r8)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2101      	movs	r1, #1
 80034ac:	438a      	bics	r2, r1
 80034ae:	609a      	str	r2, [r3, #8]
 80034b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034b6:	f383 8810 	msr	PRIMASK, r3
}
 80034ba:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2284      	movs	r2, #132	; 0x84
 80034c0:	2120      	movs	r1, #32
 80034c2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2288      	movs	r2, #136	; 0x88
 80034c8:	2120      	movs	r1, #32
 80034ca:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2280      	movs	r2, #128	; 0x80
 80034d0:	2100      	movs	r1, #0
 80034d2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e069      	b.n	80035ac <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2204      	movs	r2, #4
 80034e0:	4013      	ands	r3, r2
 80034e2:	d052      	beq.n	800358a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	69da      	ldr	r2, [r3, #28]
 80034ea:	2380      	movs	r3, #128	; 0x80
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	401a      	ands	r2, r3
 80034f0:	2380      	movs	r3, #128	; 0x80
 80034f2:	011b      	lsls	r3, r3, #4
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d148      	bne.n	800358a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2280      	movs	r2, #128	; 0x80
 80034fe:	0112      	lsls	r2, r2, #4
 8003500:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003502:	f3ef 8310 	mrs	r3, PRIMASK
 8003506:	613b      	str	r3, [r7, #16]
  return(result);
 8003508:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800350a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800350c:	2301      	movs	r3, #1
 800350e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f383 8810 	msr	PRIMASK, r3
}
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4924      	ldr	r1, [pc, #144]	; (80035b4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8003524:	400a      	ands	r2, r1
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800352a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	f383 8810 	msr	PRIMASK, r3
}
 8003532:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003534:	f3ef 8310 	mrs	r3, PRIMASK
 8003538:	61fb      	str	r3, [r7, #28]
  return(result);
 800353a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800353c:	64bb      	str	r3, [r7, #72]	; 0x48
 800353e:	2301      	movs	r3, #1
 8003540:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	f383 8810 	msr	PRIMASK, r3
}
 8003548:	46c0      	nop			; (mov r8, r8)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2101      	movs	r1, #1
 8003556:	438a      	bics	r2, r1
 8003558:	609a      	str	r2, [r3, #8]
 800355a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800355c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	f383 8810 	msr	PRIMASK, r3
}
 8003564:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2284      	movs	r2, #132	; 0x84
 800356a:	2120      	movs	r1, #32
 800356c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2288      	movs	r2, #136	; 0x88
 8003572:	2120      	movs	r1, #32
 8003574:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	228c      	movs	r2, #140	; 0x8c
 800357a:	2120      	movs	r1, #32
 800357c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2280      	movs	r2, #128	; 0x80
 8003582:	2100      	movs	r1, #0
 8003584:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e010      	b.n	80035ac <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	4013      	ands	r3, r2
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	425a      	negs	r2, r3
 800359a:	4153      	adcs	r3, r2
 800359c:	b2db      	uxtb	r3, r3
 800359e:	001a      	movs	r2, r3
 80035a0:	1dfb      	adds	r3, r7, #7
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d100      	bne.n	80035aa <UART_WaitOnFlagUntilTimeout+0x182>
 80035a8:	e747      	b.n	800343a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	0018      	movs	r0, r3
 80035ae:	46bd      	mov	sp, r7
 80035b0:	b014      	add	sp, #80	; 0x50
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	fffffe5f 	.word	0xfffffe5f

080035b8 <__libc_init_array>:
 80035b8:	b570      	push	{r4, r5, r6, lr}
 80035ba:	2600      	movs	r6, #0
 80035bc:	4d0c      	ldr	r5, [pc, #48]	; (80035f0 <__libc_init_array+0x38>)
 80035be:	4c0d      	ldr	r4, [pc, #52]	; (80035f4 <__libc_init_array+0x3c>)
 80035c0:	1b64      	subs	r4, r4, r5
 80035c2:	10a4      	asrs	r4, r4, #2
 80035c4:	42a6      	cmp	r6, r4
 80035c6:	d109      	bne.n	80035dc <__libc_init_array+0x24>
 80035c8:	2600      	movs	r6, #0
 80035ca:	f000 f821 	bl	8003610 <_init>
 80035ce:	4d0a      	ldr	r5, [pc, #40]	; (80035f8 <__libc_init_array+0x40>)
 80035d0:	4c0a      	ldr	r4, [pc, #40]	; (80035fc <__libc_init_array+0x44>)
 80035d2:	1b64      	subs	r4, r4, r5
 80035d4:	10a4      	asrs	r4, r4, #2
 80035d6:	42a6      	cmp	r6, r4
 80035d8:	d105      	bne.n	80035e6 <__libc_init_array+0x2e>
 80035da:	bd70      	pop	{r4, r5, r6, pc}
 80035dc:	00b3      	lsls	r3, r6, #2
 80035de:	58eb      	ldr	r3, [r5, r3]
 80035e0:	4798      	blx	r3
 80035e2:	3601      	adds	r6, #1
 80035e4:	e7ee      	b.n	80035c4 <__libc_init_array+0xc>
 80035e6:	00b3      	lsls	r3, r6, #2
 80035e8:	58eb      	ldr	r3, [r5, r3]
 80035ea:	4798      	blx	r3
 80035ec:	3601      	adds	r6, #1
 80035ee:	e7f2      	b.n	80035d6 <__libc_init_array+0x1e>
 80035f0:	08003714 	.word	0x08003714
 80035f4:	08003714 	.word	0x08003714
 80035f8:	08003714 	.word	0x08003714
 80035fc:	08003718 	.word	0x08003718

08003600 <memset>:
 8003600:	0003      	movs	r3, r0
 8003602:	1882      	adds	r2, r0, r2
 8003604:	4293      	cmp	r3, r2
 8003606:	d100      	bne.n	800360a <memset+0xa>
 8003608:	4770      	bx	lr
 800360a:	7019      	strb	r1, [r3, #0]
 800360c:	3301      	adds	r3, #1
 800360e:	e7f9      	b.n	8003604 <memset+0x4>

08003610 <_init>:
 8003610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003616:	bc08      	pop	{r3}
 8003618:	469e      	mov	lr, r3
 800361a:	4770      	bx	lr

0800361c <_fini>:
 800361c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003622:	bc08      	pop	{r3}
 8003624:	469e      	mov	lr, r3
 8003626:	4770      	bx	lr
